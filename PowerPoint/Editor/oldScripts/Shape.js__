var eps=7;
var left_top=0, top=1, right_top=2, right=3, right_bottom=4, bottom=5, left_bottom=6, left=7;
var adj=0, handle=1, move=2;
var xy=0, polar=1;

var N=0, NE=1, E=2, SE=3, S=4, SW=5, W=6, NW=7, ROT=8, MOVE=9;
var min_size=10;
var min_size2=3;
//типы плейсхолдеров

var phType_body     = 0,
    phType_chart    = 1,
    phType_clipArt  = 2, //(Clip Art)
    phType_ctrTitle = 3, //(Centered Title)
    phType_dgm      = 4,// (Diagram)
    phType_dt       = 5,// (Date and Time)
    phType_ftr      = 6,// (Footer)
    phType_hdr      = 7, //(Header)
    phType_media    = 8, //(Media)
    phType_obj      = 9, //(Object)
    phType_pic      = 10, //(Picture)
    phType_sldImg   = 11, //(Slide Image)
    phType_sldNum   = 12, //(Slide Number)
    phType_subTitle = 13, //(Subtitle)
    phType_tbl      = 14, //(Table)
    phType_title    = 15; //(Title)

//заполнение фигуры плейсхолдером
var szPh_full    = 0,
    szPh_half    = 1,
    szPh_quarter = 2;

var OR_PH_HOR = 0;
var OR_PH_VER = 1;

//CUSTOM PROMPTS
var CUSTOM_PROMPTS = [];

var TYPE_SLIDE_MASTER = 0;
var TYPE_SLIDE_LAYOUT = 1;
var TYPE_SLIDE = 3;


function CShapeLocks()
{
    this.noAdjustHandles = false;
    this.noChangeArrowhe = false;
    this.noChangeAspect = false;
    this.noChangeShapeTy = false;
    this.noEditPoints = false;
    this.noGrp  = false;
    this.noMove = false;
    this.noResize  = false;
    this.noRot = false;
    this.noSelect = false;
    this.noTextEdit =  false;
}

function CShape(parent/*слайд лэйаут слайд-мастер*/)
{
    this.type = graphic_objects_type_Shape;
    this.Id = g_oIdCounter.Get_NewId();
    this.selected = false;
    this.parent = parent; //slide or slideMaster

    this.useBgFill = false;
    this.nvSpPr = null;
    this.spPr = new CSpPr();
    this.style = null;//new CShapeStyle();
    this.txBody = null;

    this.pH = 0;
    this.pV = 0;
    this.rot = 0;
    this.off = {x:0, y:0};
    this.ext = {cx:0, cy:0};
    this.flipH = false;
    this.flipV = false;
    this.geometry = null;

    this.pen = null;
    this.brush = null;
    this.fontFill = null;
    this.shadow = null;

    this.TransformMatrix = new CMatrix();
    this.TransformTextMatrix = new CMatrix();

    if(this.parent.kind == SLIDE_KIND)
    {
        this.Container = this.parent.elementsManipulator;
    }

    this.text_flag = true;

    g_oTableId.Add( this, this.Id );
}

CShape.prototype =
{
    setContainer : function(container)
    {
        this.Container = container;
    },

    setParent : function(parent)
    {
        this.parent = parent;
    },

    Get_Id : function()
    {
        return this.Id;
    },

    Write_ToBinary2 : function(Writer)
    {},
    Save_Changes : function(Data, Writer)
    {
    },

    changePresetGeom : function(sPreset)
    {
        var historyData = {};
        historyData.old_geometry = this.geometry;

        if(sPreset!=null)
        {
            historyData.new_geometry = CreateGeometry(sPreset);
            historyData.new_geometry.Init(100, 100);
        }
        else
            historyData.new_geometry = null;

        historyData.undo_function = function(data)
        {
            this.geometry = data.old_geometry;
            this.Recalculate();
            this.Container.DrawingDocument.OnRecalculatePage(this.parent.num, this.parent);
        };
        historyData.redo_function = function(data)
        {
            this.geometry = data.new_geometry;
            this.Recalculate();
            this.Container.DrawingDocument.OnRecalculatePage(this.parent.num, this.parent);
        };
        History.Add(this, historyData);

        if(sPreset!=null)
        {
            this.geometry = CreateGeometry(sPreset);
            this.geometry.Init(100, 100);

        }
        else
        {
            this.geometry = null;
        }
        this.Recalculate();

        this.Container.DrawingDocument.OnRecalculatePage(this.parent.num, this.parent);
    },

    changeSize : function(w, h)
    {

        var historyData = {};
        historyData.old_w = this.ext.cx;
        historyData.old_h = this.ext.cy;
        historyData.new_w = w;
        historyData.new_h = h;
        historyData.undo_function = function(data)
        {
            this.ext.cx = data.old_w;
            this.ext.cy = data.old_h;
            this.Recalculate();
            this.Container.DrawingDocument.OnRecalculatePage(this.parent.num, this.parent);
        };
        historyData.redo_function = function(data)
        {
            this.ext.cx = data.new_w;
            this.ext.cy = data.new_h;
            this.Recalculate();
            this.Container.DrawingDocument.OnRecalculatePage(this.parent.num, this.parent);
        };
        History.Add(this, historyData);

        this.ext.cx = w;
        this.ext.cy = h;
        this.Recalculate();
        this.Container.DrawingDocument.OnRecalculatePage(this.parent.num, this.parent);
    },

    changeFill : function(unifill)
    {
        var historyObj = {};
        if(this.spPr.Fill == null)
        {
            historyObj.old_Fill = null;
        }
        else
        {
            historyObj.old_Fill = this.spPr.Fill.createDuplicate();
        }
        if(this.spPr.Fill == null )
        {
            this.spPr.Fill = new CUniFill();
        }
<<<<<<< .mine
        this.spPr.Fill = CorrectUniFill(unifill, this.spPr.Fill);
=======
        //this.spPr.Fill.merge(unifill);
        this.spPr.Fill = CorrectUniFill(unifill, this.spPr.Fill);
>>>>>>> .r40755
        if(this.spPr.Fill == null)
        {
            historyObj.new_Fill = null;
        }
        else
        {
            historyObj.new_Fill = this.spPr.Fill.createDuplicate();
        }

        historyObj.undo_function = function(data)
        {
            this.spPr.Fill = data.old_Fill;
            this.calculateFill();
        };
        historyObj.redo_function = function(data)
        {
            this.spPr.Fill = data.new_Fill;
            this.calculateFill();
        };

        History.Add(this, historyObj);
        this.calculateFill();
    },

    calculateFill : function()
    {
        var slide = null, layout = null, master = null, theme = null;
        switch(this.parent.kind)
        {
            case SLIDE_KIND :
            {
                slide = this.parent;
                layout = slide.Layout;
                if(layout)
                {
                    master = layout.Master;
                }
                break;
            }
            case LAYOUT_KIND:
            {
                layout = this.parent;
                master = layout.Master;
                break;
            }
            case MASTER_KIND :
            {
                master = this.parent;
                break;
            }
        }

        if(master)
         theme = master.Theme;
        var brush = null;
        var RGBA = {R:0, G:0, B:0, A:255};
        if (theme && this.style!=null && this.style.fillRef!=null)
        {
            brush = theme.getFillStyle(this.style.fillRef.idx);
            this.style.fillRef.Color.Calculate(theme, slide, layout, master);
            RGBA = this.style.fillRef.Color.RGBA;

            if (this.style.fillRef.Color.color != null)
            {
                if (brush.fill != null && brush.fill.type == FILL_TYPE_SOLID)
                {
                    brush.fill.color = this.style.fillRef.Color.createDuplicate();
                }
            }
        }
        else
        {
            brush = new CUniFill();
        }

        brush.merge(this.spPr.Fill);
        this.brush = brush;
        this.brush.calculate(theme, slide, layout, master, RGBA);
    },

    calculateLine : function()
    {
        var slide = null, layout = null, master = null, theme = null;
        switch(this.parent.kind)
        {
            case SLIDE_KIND :
            {
                slide = this.parent;
                layout = slide.Layout;
                if(layout)
                {
                    master = layout.Master;
                }
                break;
            }
            case LAYOUT_KIND:
            {
                layout = this.parent;
                master = layout.Master;
                break;
            }
            case MASTER_KIND :
            {
                master = this.parent;
                break;
            }
        }

        if(master)
            theme = master.Theme;

        var pen = null;
        var  RGBA = {R:0, G: 0, B:0, A:255};
        if(theme && this.style!=null && this.style.lnRef!=null)
        {
            pen = theme.getLnStyle(this.style.lnRef.idx);
            this.style.lnRef.Color.Calculate(theme, slide, layout, master);
            RGBA = this.style.lnRef.Color.RGBA;
        }
        else
        {
            pen = new CLn();
        }
        if(this.spPr.ln!=null)
        {
            pen.merge(this.spPr.ln)
        }

        if(pen.Fill!=null)
        {
            pen.Fill.calculate(theme, slide,layout, master, RGBA) ;
        }

        this.pen = pen;
    },


    calculateText : function()
    {

        var slide = null, layout = null, master = null, theme = null;
        switch(this.parent.kind)
        {
            case SLIDE_KIND :
            {
                slide = this.parent;
                layout = slide.Layout;
                if(layout)
                {
                    master = layout.Master;
                }
                break;
            }
            case LAYOUT_KIND:
            {
                layout = this.parent;
                master = layout.Master;
                break;
            }
            case MASTER_KIND :
            {
                master = this.parent;
                break;
            }
        }

        if(master)
            theme = master.Theme;
        if(this.txBody)
        {
            if(this.style && this.style.fontRef && this.style.fontRef.Color)
            {
                this.style.fontRef.Color.Calculate(theme, slide, layout, master);
                var fontRef = this.style.fontRef;
            }
            else
            {
                fontRef = null;
            }

            this.txBody.calculateText(theme, slide, layout, master, fontRef);
        }
    },
    calculateUniFills : function()
    {
        this.calculateText();
        this.calculateLine();
        this.calculateFill();
    },

    changeLine : function(line)
    {
        var historyObj = {};
        historyObj.old_Line = this.spPr.ln.createDuplicate();
        //this.spPr.ln.merge(line);
        this.spPr.ln = CorrectUniStroke(line, this.spPr.ln);
        historyObj.new_Line = this.spPr.ln.createDuplicate();
        historyObj.undo_function = function(data)
        {
            this.spPr.ln= data.old_Line;
            this.calculateLine();
        };
        historyObj.redo_function = function(data)
        {
            this.spPr.ln= data.new_Line;
            this.calculateLine();
        };

        History.Add(this, historyObj);
        this.calculateLine();
    },

    changeSizes : function(kW, kH)
    {
        this.ext.cx*=kW;
        this.ext.cy*=kH;
    },


    updateCursorTypes : function()
    {
        this.cursorTypes = [];
        var transform = this.TransformMatrix;
        var vc = this.ext.cy*0.5;
        var hc = this.ext.cx*0.5;
        var xc = transform.TransformPointX(hc, vc);
        var yc = transform.TransformPointY(hc, vc);
        var xt = transform.TransformPointX(hc, 0);
        var yt = transform.TransformPointY(hc, 0);
        var vx = xt-xc;
        var vy = yc-yt;
        var angle = Math.atan2(vy, vx)+Math.PI/8;
        if(angle < 0)
        {
            angle+=2*Math.PI;
        }
        if(angle > 2*Math.PI)
        {
            angle-=2*Math.PI;
        }

        var xlt = transform.TransformPointX(0, 0);
        var ylt = transform.TransformPointY(0, 0);
        var vx_lt = xlt-xc;
        var vy_lt = yc-ylt;
        var curTypes = [];
        curTypes[0] = "n-resize";
        curTypes[1] = "ne-resize";
        curTypes[2] = "e-resize";
        curTypes[3] = "se-resize";
        curTypes[4] = "s-resize";
        curTypes[5] = "sw-resize";
        curTypes[6] = "w-resize";
        curTypes[7] = "nw-resize";
        if(vx_lt*vy-vx*vy_lt < 0) // нумерация якорьков по часовой стрелке
        {
            for(var i = 0; i<8; ++i)
            {
                this.cursorTypes[i] = curTypes[(i+1-Math.floor(angle/(Math.PI/4))+16)%8]
            }
        }
        else
        {
            for(i = 0; i<8; ++i)
            {
                this.cursorTypes[i] = curTypes[(-i+3-Math.floor(angle/(Math.PI/4))+16)%8]
            }
        }

    },

    createDuplicate : function(parent, container)
    {
        var duplicate = new CShape(parent);
        duplicate.Container = container;

        duplicate.useBgFill = this.useBgFill;
        if(this.nvSpPr != null)
        {
            duplicate.nvSpPr = this.nvSpPr.createDuplicate();
        }

        duplicate.spPr = this.spPr.createDuplicate();

        if(this.style!=null)
        {
            duplicate.style = this.style.createDuplicate();
        }
        if(this.txBody!=null)
        {
            duplicate.txBody = this.txBody.createDuplicate(duplicate);
        }
        return duplicate;
    },

    createDuplicate2 : function(parent, container)
    {
        var duplicate = new CShape(parent);
        duplicate.Container = container;

        duplicate.useBgFill = this.useBgFill;
        if(this.nvSpPr != null)
        {
            duplicate.nvSpPr = this.nvSpPr.createDuplicate();
        }

        duplicate.spPr = this.spPr.createDuplicate();

        if(this.style!=null)
        {
            duplicate.style = this.style.createDuplicate();
        }
        return duplicate;
    },

    Get_StartPage_Absolute: function()
    {
        return this.parent.num;
    },

    Get_Paragraph_ParaPr : function()
    {
        if(this.txBody)
        {
           return this.txBody.Get_Paragraph_ParaPr();
        }
        else
        {
            return null;
        }
    },

    Get_Paragraph_TextPr : function()
    {
        if(this.txBody)
        {
            return  this.txBody.Get_Paragraph_TextPr();
        }
        else
        {
            return null;
        }
    },

    Set_ParagraphIndent : function(ind)
    {
        if(this.txBody)
        {
            this.txBody.Set_ParagraphIndent(ind);
            this.txBody.recalculate();
        }
    },

    Set_ParagraphAlign : function(align)
    {
        if(this.txBody)
        {
            this.txBody.Set_ParagraphAlign(align);
            this.txBody.recalculate();
        }
    },

    Paragraph_IncDecFontSize: function(bIncrease)
    {
        if(this.txBody)
        {
            this.txBody.Paragraph_IncDecFontSize(bIncrease);
            this.txBody.recalculate();
        }
    },

    prepareToChangeTheme : function()
    {
        if(this.isPlaceholder())
        {
            var phType = this.nvSpPr.nvPr.ph.type, phIndex = this.nvSpPr.nvPr.ph.idx;
            var layoutShape = null, masterShape = null;
            if(this.parent.kind == SLIDE_KIND)
            {
                if(this.parent.Layout)
                {
                    layoutShape = this.parent.Layout.getMatchingShape(phType, phIndex);
                    if(this.parent.Layout.Master)
                    {
                        masterShape = this.parent.Layout.Master.getMatchingShape(phType, phIndex);
                    }
                }
            }
            else if(this.parent.kind == LAYOUT_KIND)
            {
                if(this.parent.Master)
                {
                    masterShape = this.parent.Master.getMatchingShape(phType, phIndex);
                }
            }
            var tmpXfrm = new CXfrm();
            if(masterShape && masterShape.spPr.xfrm)
            {
                tmpXfrm.merge(masterShape.spPr.xfrm);
            }
            if(layoutShape && layoutShape.spPr.xfrm)
            {
                tmpXfrm.merge(layoutShape.spPr.xfrm);
            }
            //this.spPr.xfrm = new CXfrm();;
            this.spPr.xfrm.offX = this.pH;
            this.spPr.xfrm.offY = this.pV;

            this.spPr.xfrm.extX = this.ext.cx;
            this.spPr.xfrm.extY = this.ext.cy;
            if(this.spPr.xfrm.isEqual(tmpXfrm))
            {
                this.spPr.xfrm = new CXfrm();
            }
        }
        else
        {
            this.spPr.xfrm.offX = this.pH;
            this.spPr.xfrm.offY = this.pV;

            this.spPr.xfrm.extX = this.ext.cx;
            this.spPr.xfrm.extY = this.ext.cy;
        }
    },

    calculate : function()
    {
        if(this.isPlaceholder())
        {
            var phIdx = this.nvSpPr.nvPr.ph.idx, phType = this.nvSpPr.nvPr.ph.type;
            switch(this.parent.kind)
            {
                case SLIDE_KIND :
                {
                    var duplicate =  this.createDuplicate2(this.parent, this.Container);
                    this.merge(this.parent.Layout.Master.getMatchingShape(phType, phIdx));
                    this.merge(this.parent.Layout.getMatchingShape(phType, phIdx));
                    this.merge(duplicate);
                    break;
                }
                case LAYOUT_KIND :
                {
                    duplicate =  this.createDuplicate2(this.parent, this.Container);
                    this.merge(this.parent.Master.getMatchingShape(phType, phIdx));
                    this.merge(duplicate);
                    break;
                }
            }
        }

        if(this.spPr.Geometry!=null)
        {
            this.geometry = this.spPr.Geometry;
        }

        if(this.spPr.xfrm.offX!=null)
        {
            this.pH = this.spPr.xfrm.offX;
        }
        else
        {
            this.pH = 0;
        }

        if(this.spPr.xfrm.offY!=null)
        {
            this.pV = this.spPr.xfrm.offY;
        }
        else
        {
            this.pV = 0;
        }

        this.ext = {};
        this.off = {x: 0, y:0};
        if(this.spPr.xfrm.extX!=null)
        {
            this.ext.cx = this.spPr.xfrm.extX;
        }
        else
        {
            this.ext.cx = 0;
        }
        if(this.spPr.xfrm.extY!=null)
        {
            this.ext.cy = this.spPr.xfrm.extY;
        }
        else
        {
            this.ext.cy = 0;
        }

        if(this.spPr.xfrm.flipH!=null)
        {
            this.flipH = this.spPr.xfrm.flipH;
        }
        else
        {
            this.flipH = false;
        }

        if(this.spPr.xfrm.flipV!=null)
        {
            this.flipV = this.spPr.xfrm.flipV;
        }
        else
        {
            this.flipV = false;
        }

        if(this.spPr.xfrm.rot!=null)
        {
            this.rot = this.spPr.xfrm.rot;
        }
        else
        {
            this.rot = 0;
        }

        this.calculateFill();
        this.calculateLine();

        if(this.geometry)
        {
            this.geometry.Init(this.ext.cx, this.ext.cy);
        }
        if(this.txBody)
        {
          this.txBody.calculate();
        }

        this.calculateText();
        this.Recalculate();
        this.updateCursorTypes();

    },



    calculate2 : function()
    {
        if(this.isPlaceholder())
        {
            var phIdx = this.nvSpPr.nvPr.ph.idx, phType = this.nvSpPr.nvPr.ph.type;
            switch(this.parent.kind)
            {
                case SLIDE_KIND :
                {
                    var duplicate =  this.createDuplicate2(this.parent, this.Container);
                    this.merge(this.parent.Layout.Master.getMatchingShape(phType, phIdx));
                    this.merge(this.parent.Layout.getMatchingShape(phType, phIdx));
                    this.merge(duplicate);
                    break;
                }
                case LAYOUT_KIND :
                {
                    duplicate =  this.createDuplicate2(this.parent, this.Container);
                    this.merge(this.parent.Master.getMatchingShape(phType, phIdx));
                    this.merge(duplicate);
                    break;
                }
            }
        }

        if(this.spPr.Geometry!=null)
        {
            this.geometry = this.spPr.Geometry;
        }

        if(this.spPr.xfrm.offX!=null)
        {
            this.pH = this.spPr.xfrm.offX;
        }
        else
        {
            this.pH = 0;
        }

        if(this.spPr.xfrm.offY!=null)
        {
            this.pV = this.spPr.xfrm.offY;
        }
        else
        {
            this.pV = 0;
        }

        this.ext = {};
        this.off = {x: 0, y:0};
        if(this.spPr.xfrm.extX!=null)
        {
            this.ext.cx = this.spPr.xfrm.extX;
        }
        else
        {
            this.ext.cx = 0;
        }
        if(this.spPr.xfrm.extY!=null)
        {
            this.ext.cy = this.spPr.xfrm.extY;
        }
        else
        {
            this.ext.cy = 0;
        }

        if(this.spPr.xfrm.flipH!=null)
        {
            this.flipH = this.spPr.xfrm.flipH;
        }
        else
        {
            this.flipH = false;
        }

        if(this.spPr.xfrm.flipV!=null)
        {
            this.flipV = this.spPr.xfrm.flipV;
        }
        else
        {
            this.flipV = false;
        }

        if(this.spPr.xfrm.rot!=null)
        {
            this.rot = this.spPr.xfrm.rot;
        }
        else
        {
            this.rot = 0;
        }

        this.calculateFill();
        this.calculateLine();

        if(this.geometry)
        {
            if(this.geometry.gdLst["_3cd4"] == undefined)
            {
                this.geometry.Init(this.ext.cx, this.ext.cy);
            }
            else
            {
                this.geometry.Recalculate(this.ext.cx, this.ext.cy);
            }
        }
        if(this.txBody)
        {
            this.txBody.calculateBodyPr();
        }

        this.calculateText();
        this.Recalculate();
        this.updateCursorTypes();

    },


    /* calculate2 : function(slideShape)
  {
      if(slideShape == undefined)
      {
          slideShape = this.createDuplicate2(this.parent, this.Container);
      }
      if(this.parent.kind == SLIDE_KIND)
      {
          if(!this.isPlaceholder())
          {
              this.merge(slideShape);
          }
          else
          {
              var layoutShape = null;
              var masterShape = null;
              if(this.parent.Layout != null)
              {
                  layoutShape = this.parent.Layout.getMatchingShape(this.nvSpPr.nvPr.ph.type, this.nvSpPr.nvPr.ph.idx);
                  if(this.parent.Layout.Master!=null)
                  {
                      masterShape = this.parent.Layout.Master.getMatchingShape(this.nvSpPr.nvPr.ph.type, this.nvSpPr.nvPr.ph.idx);
                  }
              }

              this.merge(masterShape);
              this.merge(layoutShape);
              this.merge(slideShape);
          }

          if(this.spPr.Geometry!=null)
          {
              this.geometry = this.spPr.Geometry;
          }

          if(this.spPr.xfrm.offX!=null)
          {
              this.pH = this.spPr.xfrm.offX;
          }
          else
          {
              this.pH = 0;
          }

          if(this.spPr.xfrm.offY!=null)
          {
              this.pV = this.spPr.xfrm.offY;
          }
          else
          {
              this.pV = 0;
          }


          this.ext = {};
          this.off = {x: 0, y:0};
          if(this.spPr.xfrm.extX!=null)
          {
              this.ext.cx = this.spPr.xfrm.extX;
          }
          else
          {
              this.ext.cx = 0;
          }
          if(this.spPr.xfrm.extY!=null)
          {
              this.ext.cy = this.spPr.xfrm.extY;
          }
          else
          {
              this.ext.cy = 0;
          }

          if(this.spPr.xfrm.flipH!=null)
          {
              this.flipH = this.spPr.xfrm.flipH;
          }
          else
          {
              this.flipH = false;
          }

          if(this.spPr.xfrm.flipV!=null)
          {
              this.flipV = this.spPr.xfrm.flipV;
          }
          else
          {
              this.flipV = false;
          }

          if(this.spPr.xfrm.rot!=null)
          {
              this.rot = this.spPr.xfrm.rot;
          }
          else
          {
              this.rot = 0;
          }



          this.calculateFill();
          this.calculateLine();

          if(this.geometry)
          {
              if(this.geometry.gdLst["_3cd4"] == undefined)
              {
                  this.geometry.Init(this.ext.cx, this.ext.cy);
              }
              else
              {
                  this.geometry.Recalculate(this.ext.cx, this.ext.cy);
              }
          }
          if(this.txBody)
          {
              this.txBody.calculateBodyPr();
             // this.txBody.calculate();
          }

          this.calculateText();
          this.Recalculate();
          this.updateCursorTypes();
      }
      this.updateCursorTypes();

  },  */

    calculateColors: function()
    {
        if(this.parent.kind == SLIDE_KIND)
        {
            var slide, layout, masterSlide, theme;
            slide = this.parent;
            layout = this.parent.Layout;
            if(layout!=null)
            {
                masterSlide = layout.Master;
            }

            if(masterSlide!=null)
            {
                theme = masterSlide.Theme;
            }
            if(this.brush != null)
            {
                this.brush.calculate(theme, slide, layout, masterSlide);
            }

            if(this.pen != null)
            {
                this.pen.calculate(theme, slide, layout, masterSlide);
            }

            if(this.fontFill != null)
            {
                this.fontFill.calculate(theme, slide, layout, masterSlide);
            }
        }
    },

    merge : function(shape)
    {

        if(shape!=null)
        {
            if(shape.nvSpPr!=null)
            {
                this.nvSpPr = shape.nvSpPr.createDuplicate();
            }

            this.spPr.merge(shape.spPr);

            if(shape.style!=null)
            {
                this.style.merge(shape.style);
            }

            //TODO: txBody
        }

    },


    getFullTransform : function()
    {
        if(this.Container.IsGroup())
        {
            return this.TransformMatrix.CreateDublicate().Multiply(this.Container.getFullTransform(), 0);
        }
        else
        {
           return this.TransformMatrix.CreateDublicate();
        }
    },

    AddGeometry: function(geometry)
    {
        this.geometry=geometry;
    },

    Paragraph_Add: function(ParaItem, bRecalculate)
    {
        if(this.txBody )  {

            this.txBody.addToParagraph(ParaItem);

        }
    },

    Get_PageContentStartPos: function()
    {
       if(this.parent.kind == SLIDE_KIND)
       {
           return this.parent.Layout.Master.presentation.Get_PageContentStartPos( this.parent.num );
       }

        if(this.geometry && this.geometry.rect)
        {
            return {
                X : this.geometry.rect.l+this.pH+this.ext.x,
                XLimit: this.geometry.r-this.geometry.l,
                Y : this.geometry.rect.t+this.pV+this.ext.y,
                YLimit : this.geometry.b-this.geometry.t,
                MaxTopBorder : 0}
        }
        else {

            return {
                X : this.pH+this.ext.x,
                XLimit: this.ext.x,
                Y : this.pV+this.ext.y,
                YLimit : this.ext.y,
                MaxTopBorder : 0}

        }

    },

    isPlaceholder : function()
    {
        return this.nvSpPr != null && this.nvSpPr.nvPr != undefined && this.nvSpPr.nvPr.ph != undefined;
    },

   

    getBounds : function()
    {

    },


    Set_SelectionState : function(State, idx)
    {
        if(this.txBody && this.txBody.content)
        {
            this.txBody.content.Set_SelectionState(State, idx);
        }
    },


    Get_SelectionState : function()
    {
        if(this.txBody && this.txBody.content)
        {
          return  this.txBody.content.Get_SelectionState();
        }
    },

    Draw: function(graphics)
    {
        if(this.geometry || this.style)
        {
            graphics.SetIntegerGrid(false);
            graphics.transform3(this.TransformMatrix);

            var shape_drawer = new CShapeDrawer();
            shape_drawer.fromShape(this, graphics);
            shape_drawer.draw(this.geometry);
        }
        else if(this.isEmptyPlaceholder())
        {
            graphics.reset();
            graphics.SetIntegerGrid(false);
            graphics.p_width(70);
            graphics.transform3(this.TransformMatrix);
            graphics.p_color(0,0,0,255);
            graphics._s();
            graphics._m(0, 0);
            graphics._l(this.ext.cx*100, 0);
            graphics._l(this.ext.cx*100, this.ext.cy*100);
            graphics._l(0, this.ext.cy*100);
            graphics._z();
            graphics.ds();

            graphics.SetIntegerGrid(true);
            graphics.reset();
        }

        if(this.txBody)
        {
            graphics.SetIntegerGrid(false);
            graphics.transform3(this.TransformTextMatrix);
            this.txBody.draw(graphics);
        }

        graphics.reset();
        graphics.SetIntegerGrid(true);

    },

    check_bounds: function(checker)
    {
        if (this.geometry)
        {
            this.geometry.check_bounds(checker);
        }
    },


    checkDrawGeometry : function()
    {
        return this.geometry &&
            ( (this.pen && this.pen.Fill && this.pen.Fill.fill
                && this.pen.Fill.fill.type != FILL_TYPE_NOFILL && this.pen.Fill.fill.type != FILL_TYPE_NONE)
                || (this.brush && this.brush.fill && this.brush.fill
                && this.brush.fill.type != FILL_TYPE_NOFILL && this.brush.fill.type != FILL_TYPE_NONE) )
    },

    DrawInTrack: function(graphics)
    {
        if(this.checkDrawGeometry())
        {
            this.Draw(graphics);
        }
        else
        {
            graphics.SetIntegerGrid(false);
            graphics.transform3(this.TransformMatrix);
            graphics._m(0, 0);
            graphics._l(this.ext.cx*100, 0);
            graphics._l(this.ext.cx*100, this.ext.cy*100);
            graphics._l(0, this.ext.cy*100);
            graphics._z();
            graphics.p_color(255,255,255,160);
            graphics.p_width(2);
            graphics.ds();
            graphics.b_color1(255,255,255,128);
            graphics.df();
        }
    },


    isEmptyPlaceholder : function()
    {
        if(this.isPlaceholder())
        {
            if(this.nvSpPr.nvPr.ph.type == phType_title
                || this.nvSpPr.nvPr.ph.type == phType_ctrTitle
                || this.nvSpPr.nvPr.ph.type == phType_body
                || this.nvSpPr.nvPr.ph.type == phType_subTitle)
            {
                if(this.txBody)
                {
                    if(this.txBody.content)
                    {
                        return this.txBody.content.Is_Empty();
                    }
                    return true;
                }
                return true;
            }
        }
        else
        {
            return false;
        }
    },

    DrawAdj: function(graphics,zoom)
    {
        if(this.geometry && this.ext.cx>min_size&&this.ext.cy>min_size)
        {
            graphics.SetIntegerGrid(false);
            graphics.reset();
            graphics.transform3(this.TransformMatrix);

            var d=30000/zoom;
            graphics.b_color1(254, 251, 132, 255);
            for(var i=0; i<this.geometry.ahXYLst.length; i++)
            {
                diamond(graphics, this.geometry.ahXYLst[i].posX*100, this.geometry.ahXYLst[i].posY*100, d);
            }
            for(i=0; i<this.geometry.ahPolarLst.length; i++)
            {
                diamond(graphics, this.geometry.ahPolarLst[i].posX*100, this.geometry.ahPolarLst[i].posY*100, d);
            }
            graphics.reset();
        }

    },

    DrawAdjInGroup: function(graphics, transform,zoom)
    {
        if(this.geometry && this.ext.cx>min_size&&this.ext.cy>min_size) {

            graphics.SetIntegerGrid(false);
            graphics.reset();
            graphics.transform3(transform);

            var d=30000/zoom;
            graphics.b_color1(254, 251, 132, 255);
            for(var i=0; i<this.geometry.ahXYLst.length; i++)
            {
                diamond(graphics, this.geometry.ahXYLst[i].posX*100, this.geometry.ahXYLst[i].posY*100, d);
            }
            for(i=0; i<this.geometry.ahPolarLst.length; i++) {

                diamond(graphics, this.geometry.ahPolarLst[i].posX*100, this.geometry.ahPolarLst[i].posY*100, d);
            }

            graphics.reset();
        }

    },

    Move: function(pH, pV)
    {
        this.pH=pH;
        this.pV=pV;
        this.RecalculateTransformMatrix();
    },

    copyTransform : function(group)
    {

        var historyData = {};
        historyData.old_ext = clonePrototype(this.ext);
        historyData.old_off = clonePrototype(this.off);
        historyData.old_pH = this.pH;
        historyData.old_pV = this.pV;
        historyData.old_flipH = this.flipH;
        historyData.old_flipV = this.flipV;

        historyData.new_ext = clonePrototype(group.ext);
        historyData.new_off = clonePrototype(group.off);
        historyData.new_pH = group.pH;
        historyData.new_pV = group.pV;
        historyData.new_flipH = group.flipH;
        historyData.new_flipV = group.flipV;

        historyData.undo_function = function(data)
        {
            this.ext = clonePrototype(data.old_ext);
            this.off = clonePrototype(data.old_off);
            this.pH = data.old_pH;
            this.pV = data.old_pV;
            this.flipH = data.old_flipH;
            this.flipV = data.old_flipV;
            this.Recalculate();
        };

        historyData.redo_function = function(data)
        {
            this.ext = clonePrototype(data.new_ext);
            this.off = clonePrototype(data.new_off);
            this.pH = data.new_pH;
            this.pV = data.new_pV;
            this.flipH = data.new_flipH;
            this.flipV = data.new_flipV;
            this.Recalculate();
        };

        History.Add(this, historyData);
        this.pH = group.pH;
        this.pV = group.pV;
        this.ext = clonePrototype(group.ext);
        this.off = clonePrototype(group.off);
        this.flipH = group.flipH;
        this.flipV = group.flipV;

    },

    RecalculateTransformMatrix: function()
    {
        this.TransformMatrix = this.getTransform();
        if(this.txBody)
        {
            this.txBody.calculateTransformMatrix();
        }
    },


    createDuplicateForTrack : function(container)
    {
        var duplicate = new clone(this);
        duplicate.Container = container;
        return duplicate;
    },

    getTransform : function()
    {
        var  hc, vc;
        hc = this.ext.cx*0.5;
        vc = this.ext.cy*0.5;

        var xc, yc;
        xc = this.pH  + hc;
        yc = this.pV  + vc;

        var localTransform = new CMatrix();

        localTransform.Translate(-xc,-yc, 1);
        if(this.flipH)
        {
            localTransform.Scale(-1,1, 1);
        }
        if(this.flipV)
        {
            localTransform.Scale(1, -1, 1);
        }
        var r=rad2deg(this.rot);
        localTransform.RotateAt(-r, 0, 0, 1);
        localTransform.Translate(xc, yc, 1);
        localTransform.Translate(this.pH, this.pV, 0);

        var tmp = this.Container.getTransform();
        var tmp2  =  tmp.Multiply(localTransform, MATRIX_ORDER_PREPEND).CreateDublicate();
        return tmp2;
    },

    GetTransformForTexture: function()
    {
        var  hc, vc;
        hc = this.ext.cx*0.5;
        vc = this.ext.cy*0.5;

        var mtx = new CMatrix();
        var xc, yc;
        xc = this.pH + this.off.x + hc;
        yc = this.pV + this.off.y + vc;

        mtx.Translate(-xc,-yc, 1);
        if (this.flipH)
            mtx.Scale(-1,1, 1);
        if (this.flipV)
            mtx.Scale(1, -1, 1);

        mtx.RotateAt(0, 0, 0, 1);
        mtx.Translate(xc, yc, 1);
        mtx.Translate(this.pH, this.pV, 0);

        return mtx;
    },

    Resize: function(num, kd1, kd2)
    {
        this.changed = true;
        var xfp, yfp;//координаты неподвижной точки
        var hc, vc, sin, cos, tw, th;
        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;
        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);
        var cx, cy;
        cx=this.ext.cx;
        cy=this.ext.cy;
        if(this.isLine && cx==0)
            cx=0.1;
        if(this.isLine && cy==0)
            cy=0.1;
        if(!this.flipH&&!this.flipV)
        {
            switch(num)
            {
                case 0:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    tw=cx*kd1;
                    th=cy*kd2;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 1:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    th=cy*kd1;

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    vc=this.ext.cy*0.5;
                    if(!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 2:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd2;
                    th=cy*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 3:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;
                    tw=cx*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 4:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd1;
                    th=cy*kd2;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }
                case 5:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    th=cy*kd1;
                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 6:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd2;
                    th=cy*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }
                case 7:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }
            }
        }
        else if(this.flipH&&this.flipV)
        {
            switch(num)
            {
                case 4:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    tw=cx*kd1;
                    th=cy*kd2;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 5:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    th=cy*kd1;

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 6:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd2;
                    th=cy*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 7:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;
                    tw=cx*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 0:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd1;
                    th=cy*kd2;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }
                case 1:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    th=cy*kd1;
                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 2:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd2;
                    th=cy*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 3:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }
            }
        }
        else if(this.flipH&&!this.flipV)
        {
            switch(num)
            {
                case 2:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    tw=cx*kd1;
                    th=cy*kd2;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 1:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    th=cy*kd1;

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 0:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd2;
                    th=cy*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 7:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;
                    tw=cx*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 6:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd1;
                    th=cy*kd2;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }
                case 5:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    th=cy*kd1;
                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 4:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd2;
                    th=cy*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 3:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }
            }
        }
        else if(!this.flipH&&this.flipV)
        {
            switch(num)
            {
                case 6:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    tw=cx*kd1;
                    th=cy*kd2;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 5:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    th=cy*kd1;

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 4:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd2;
                    th=cy*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 3:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;
                    tw=cx*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 2:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd1;
                    th=cy*kd2;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }
                case 1:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    th=cy*kd1;
                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 0:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd2;
                    th=cy*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 7:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=cx*kd1;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }
            }
        }
        this.Recalculate();
    },

    ResizeRelativeCenter: function(num, kd1, kd2)
    {
        var xfp, yfp;//координаты неподвижной точки
        var hc, vc, tw, th;
        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;
        xfp=hc+this.pH+this.off.x;
        yfp=vc+this.pV+this.off.y;

        if( (!this.flipH&&!this.flipV)
            || (this.flipH&&this.flipV) ) {

            switch(num)
            {
                case 0:
                case 4:
                {
                    tw=this.ext.cx*(2*kd1-1);
                    th=this.ext.cy*(2*kd2-1);

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }
                    break;
                }
                case 1:
                case 5:
                {
                    th=this.ext.cy*(2*kd1-1);
                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }
                    break;
                }

                case 2:
                case 6:
                {
                    tw=this.ext.cx*(2*kd2-1);
                    th=this.ext.cy*(2*kd1-1);
                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    break;
                }
                case 3:
                case 7:
                {
                    tw=this.ext.cx*(2*kd1-1);
                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    break;
                }
            }
        }
        else {

            switch(num) {

                case 2:
                case 6:
                {
                    tw=this.ext.cx*(2*kd1-1);
                    th=this.ext.cy*(2*kd2-1);

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    break;
                }
                case 1:
                case 5:
                {
                    th=this.ext.cy*(2*kd1-1);

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    break;
                }

                case 0:
                case 4:
                {

                    tw=this.ext.cx*(2*kd2-1);
                    th=this.ext.cy*(2*kd1-1);

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }


                    break;
                }
                case 7:
                case 3:
                {
                    tw=this.ext.cx*(2*kd1-1);

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    break;
                }


            }
        }

        this.pH=xfp-this.ext.cx*0.5;
        this.pV=yfp-this.ext.cy*0.5;
        this.Recalculate();
    },


    ResizeProport: function(num, k)
    {
        var xfp, yfp;//координаты неподвижной точки
        var hc, vc, sin, cos, tw, th;
        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;
        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);
        if(!this.flipH&&!this.flipV)
        {
            switch(num)
            {
                case 0:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 1:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    th=this.ext.cy*k;

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 2:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 3:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;
                    tw=this.ext.cx*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 4:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }
                case 5:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    th=this.ext.cy*k;
                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 6:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 7:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }
            }
        }
        else if(this.flipH&&this.flipV)
        {
            switch(num)
            {
                case 4:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 5:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    th=this.ext.cy*k;

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }


                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 6:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 7:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;
                    tw=this.ext.cx*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 0:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }
                case 1:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    th=this.ext.cy*k;
                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 2:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 3:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }
            }
        }
        else if(this.flipH&&!this.flipV)
        {
            switch(num)
            {
                case 2:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 1:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    th=this.ext.cy*k;

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 0:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 7:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;
                    tw=this.ext.cx*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 6:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }
                case 5:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    th=this.ext.cy*k;
                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 4:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 3:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }
            }
        }
        else if(!this.flipH&&this.flipV)
        {
            switch(num)
            {
                case 6:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 5:
                {
                    xfp=(hc*cos-vc*sin)+hc+this.pH+this.off.x;
                    yfp=(hc*sin+vc*cos)+vc+this.pV+this.off.y;

                    th=this.ext.cy*k;

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 4:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }
                case 3:
                {
                    xfp=(-hc*cos-vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin+vc*cos)+this.pV+vc+this.off.y;
                    tw=this.ext.cx*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    break;
                }

                case 2:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }
                case 1:
                {
                    xfp=(-hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(-hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    th=this.ext.cy*k;
                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 0:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;
                    th=this.ext.cy*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    if(th>0)
                        if(th>min_size2||this.isLine)
                            this.ext.cy=th;
                        else
                            this.ext.cy=min_size2;
                    else
                    {
                        this.flipV=!this.flipV;
                        if(th<-min_size2||this.isLine)
                            this.ext.cy=-th;
                        else
                            this.ext.cy=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }

                case 7:
                {
                    xfp=(hc*cos+vc*sin)+this.pH+hc+this.off.x;
                    yfp=(hc*sin-vc*cos)+this.pV+vc+this.off.y;

                    tw=this.ext.cx*k;

                    if(tw>0)
                        if(tw>min_size2||this.isLine)
                            this.ext.cx=tw;
                        else
                            this.ext.cx=min_size2;
                    else
                    {
                        this.flipH=!this.flipH;
                        if(tw<-min_size2||this.isLine)
                            this.ext.cx=-tw;
                        else
                            this.ext.cx=min_size2;
                    }

                    hc=this.ext.cx*0.5;
                    vc=this.ext.cy*0.5;
                    if(!this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(-hc*cos-vc*sin)-hc;
                        this.pV=yfp+(-hc*sin+vc*cos)-vc;
                    }
                    else if(this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(hc*cos+vc*sin)-hc;
                        this.pV=yfp+(hc*sin-vc*cos)-vc;
                    }
                    else if(this.flipH&&this.flipV)
                    {
                        this.pH=xfp+(hc*cos-vc*sin)-hc;
                        this.pV=yfp+(hc*sin+vc*cos)-vc;
                    }
                    else if(!this.flipH&&!this.flipV)
                    {
                        this.pH=xfp+(-hc*cos+vc*sin)-hc;
                        this.pV=yfp+(-hc*sin-vc*cos)-vc;
                    }
                    break;
                }
            }
        }
        this.Recalculate();
    },

    DefineResizeCoef: function(num, x, y)
    {
        var cx, cy;
        cx= this.ext.cx>0 ? this.ext.cx : 0.1;
        cy= this.ext.cy>0 ? this.ext.cy : 0.1;
        var p = this.GetPointRelativeShape(x, y);
        if(!this.flipH&&!this.flipV) {

            switch(num) {

                case 0:
                    return {kd1: (cx-p.x)/cx, kd2: (cy-p.y)/cy};
                case 1:
                    return {kd1: (cy-p.y)/cy, kd2: 0};
                case 2:
                    return {kd1: (cy-p.y)/cy, kd2: p.x/cx};
                case 3:
                    return {kd1: p.x/cx, kd2: 0};
                case 4:
                    return {kd1: p.x/cx, kd2: p.y/cy};
                case 5:
                    return {kd1: p.y/cy, kd2: 0};
                case 6:
                    return {kd1: p.y/cy, kd2:(cx-p.x)/cx};
                case 7:
                    return {kd1:(cx-p.x)/cx, kd2: 0};
            }
        }
        else if(this.flipH&&this.flipV)
        {
            switch(num)
            {
                case 4:
                    return {kd1: (cx-p.x)/cx, kd2: (cy-p.y)/cy};
                case 5:
                    return {kd1: (cy-p.y)/cy, kd2: 0};
                case 6:
                    return {kd1: (cy-p.y)/cy, kd2: p.x/cx};
                case 7:
                    return {kd1: p.x/cx, kd2: 0};
                case 0:
                    return {kd1: p.x/cx, kd2: p.y/cy};
                case 1:
                    return {kd1: p.y/cy, kd2: 0};
                case 2:
                    return {kd1: p.y/cy, kd2:(cx-p.x)/cx};
                case 3:
                    return {kd1:(cx-p.x)/cx, kd2: 0};
            }
        }
        else if(this.flipH&&!this.flipV)
        {
            switch(num)
            {
                case 2:
                    return {kd1: (cx-p.x)/cx, kd2: (cy-p.y)/cy};
                case 1:
                    return {kd1: (cy-p.y)/cy, kd2: 0};
                case 0:
                    return {kd1: (cy-p.y)/cy, kd2: p.x/cx};
                case 7:
                    return {kd1: p.x/cx, kd2: 0};
                case 6:
                    return {kd1: p.x/cx, kd2: p.y/cy};
                case 5:
                    return {kd1: p.y/cy, kd2: 0};
                case 4:
                    return {kd1: p.y/cy, kd2:(cx-p.x)/cx};
                case 3:
                    return {kd1:(cx-p.x)/cx, kd2: 0};
            }
        }
        else
        {
            switch(num)
            {
                case 6:
                    return {kd1: (cx-p.x)/cx, kd2: (cy-p.y)/cy};
                case 5:
                    return {kd1: (cy-p.y)/cy, kd2: 0};
                case 4:
                    return {kd1: (cy-p.y)/cy, kd2: p.x/cx};
                case 3:
                    return {kd1: p.x/cx, kd2: 0};
                case 2:
                    return {kd1: p.x/cx, kd2: p.y/cy};
                case 1:
                    return {kd1: p.y/cy, kd2: 0};
                case 0:
                    return {kd1: p.y/cy, kd2:(cx-p.x)/cx};
                case 7:
                    return {kd1:(cx-p.x)/cx, kd2: 0};
            }
        }
    },

    DefineResizeProportionCoef : function(num, x, y) {

    },

    GetPointRelativeShape: function(x, y)
    {
        var x_lt, y_lt;
        var hc, vc, sin, cos;

        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        x_lt=-hc*cos+vc*sin+this.pH+this.off.x+hc;
        y_lt=-hc*sin-vc*cos+this.pV+this.off.y+vc;

        var tx=x-x_lt, ty=y-y_lt;
        var vx, vy;

        vx=tx*cos+ty*sin;
        vy=-tx*sin+ty*cos;
        return {x: vx, y:vy}
    },

    Get_Styles: function(level)
    {
        if(level == undefined)
        {
            level  = 0;
        }

        var Styles = new CStyles();

        var theme = null, layout = null, master = null, presentation;

        switch(this.parent.kind)
        {
            case SLIDE_KIND :
            {
                layout = this.parent.Layout;
                if(layout!=null)
                {
                    master = layout.Master;
                    if(master!=null)
                    {
                        theme = master.Theme;
                        presentation = master.presentation;
                    }
                }
                break;
            }
            case LAYOUT_KIND :
            {

                layout = this.parent;
                if(layout!=null)
                {
                    master = layout.Master;
                    if(master!=null)
                    {
                        theme = master.Theme;
                        presentation = master.presentation;
                    }
                }
                break;
            }
            case MASTER_KIND :
            {

                master = this.parent;
                if(master!=null)
                {
                    theme = master.Theme;
                    presentation = master.presentation;
                }
                break;
            }
        }

        var isPlaceholder = this.isPlaceholder();
        if(isPlaceholder)
        {
            var phId = this.nvSpPr.nvPr.ph.id, phType = this.nvSpPr.nvPr.ph.type;
            var layoutShape = null, masterShape = null;
            if(layout!=null)
            {
                layoutShape = layout.getMatchingShape(phType, phId);
            }
            if(master != null)
            {
                masterShape = master.getMatchingShape(phType, phId);
            }
        }

        var defaultStyle = null, masterStyle = null, masterShapeStyle = null, layoutShapeStyle = null, slideShapeStyle = null;


        if(presentation != null
            && presentation.defaultTextStyle != null
            && presentation.defaultTextStyle.levels[level] != null)
        {
            defaultStyle = new CStyle("defaultStyle", null, null, null);
            defaultStyle.ParaPr =  clone(presentation.defaultTextStyle.levels[level].pPr);
            defaultStyle.TextPr =  clone(presentation.defaultTextStyle.levels[level].rPr);
            if(defaultStyle.TextPr.FontFamily  && defaultStyle.TextPr.FontFamily.Name )
            {
                  if(isThemeFont(defaultStyle.TextPr.FontFamily.Name) && theme && theme.themeElements.fontScheme)
                  {
                      defaultStyle.TextPr.FontFamily.Name = getFontInfo(defaultStyle.TextPr.FontFamily.Name)(theme.themeElements.fontScheme);
                  }
            }
        }


        if(master && master.txStyles)
        {
            if(isPlaceholder)
            {
                switch(phType)
                {
                    case phType_ctrTitle :
                    case phType_title :
                    {
                        if(master.txStyles.titleStyle && master.txStyles.titleStyle.levels[level])
                        {
                            masterStyle = new CStyle("masterStyle", null, null, null);
                            masterStyle.ParaPr =  clone(master.txStyles.titleStyle.levels[level].pPr);
                            masterStyle.TextPr =  clone(master.txStyles.titleStyle.levels[level].rPr);
                        }
                        break;
                    }
                    case phType_body :
                    {
                        if(master.txStyles.bodyStyle && master.txStyles.bodyStyle.levels[level])
                        {
                            masterStyle = new CStyle("masterStyle", null, null, null);
                            masterStyle.ParaPr =  clone(master.txStyles.bodyStyle.levels[level].pPr);
                            masterStyle.TextPr =  clone(master.txStyles.bodyStyle.levels[level].rPr);
                        }
                        break;
                    }
                    default :
                    {
                        if(master.txStyles.otherStyle && master.txStyles.otherStyle.levels[level])
                        {
                            masterStyle = new CStyle("masterStyle", null, null, null);
                            masterStyle.ParaPr =  clone(master.txStyles.otherStyle.levels[level].pPr);
                            masterStyle.TextPr =  clone(master.txStyles.otherStyle.levels[level].rPr);
                        }
                        break;
                    }
                }
            }
            else
            {
                if(master.txStyles.otherStyle && master.txStyles.otherStyle.levels[level])
                {
                    masterStyle = new CStyle("masterStyle", null, null, null);
                    masterStyle.ParaPr =  clone(master.txStyles.otherStyle.levels[level].pPr);
                    masterStyle.TextPr =  clone(master.txStyles.otherStyle.levels[level].rPr);
                }
            }
            if( masterStyle && masterStyle.TextPr && masterStyle.TextPr.FontFamily  && masterStyle.TextPr.FontFamily.Name )
            {
                if(masterStyle.TextPr.FontFamily && isThemeFont(masterStyle.TextPr.FontFamily.Name) && theme && theme.themeElements.fontScheme)
                {
                    masterStyle.TextPr.FontFamily.Name = getFontInfo(masterStyle.TextPr.FontFamily.Name)(theme.themeElements.fontScheme);
                }
            }
        }

        if(isPlaceholder)
        {
            if(masterShape && masterShape.txBody && masterShape.txBody.lstStyle && masterShape.txBody.lstStyle.levels[level])
            {
                masterShapeStyle = new CStyle("masterShapeStyle", null, null, null);
                masterShapeStyle.ParaPr =  clone(masterShape.txBody.lstStyle.levels[level].pPr);
                masterShapeStyle.TextPr =  clone(masterShape.txBody.lstStyle.levels[level].rPr);
                if(masterShapeStyle.TextPr.FontFamily && isThemeFont(masterShapeStyle.TextPr.FontFamily.Name) && theme && theme.themeElements.fontScheme)
                {
                    masterShapeStyle.TextPr.FontFamily.Name = getFontInfo(masterShapeStyle.TextPr.FontFamily.Name)(theme.themeElements.fontScheme);
                }
            }
            if(layoutShape && layoutShape.txBody && layoutShape.txBody.lstStyle && layoutShape.txBody.lstStyle.levels[level])
            {
                layoutShapeStyle = new CStyle("layoutShapeStyle", null, null, null);
                layoutShapeStyle.ParaPr =  clone(layoutShape.txBody.lstStyle.levels[level].pPr);
                layoutShapeStyle.TextPr =  clone(layoutShape.txBody.lstStyle.levels[level].rPr);
                if(layoutShapeStyle.TextPr.FontFamily && isThemeFont(layoutShapeStyle.TextPr.FontFamily.Name) && theme && theme.themeElements.fontScheme)
                {
                    layoutShapeStyle.TextPr.FontFamily.Name = getFontInfo(layoutShapeStyle.TextPr.FontFamily.Name)(theme.themeElements.fontScheme);
                }
            }
        }

        if(this.parent.kind == SLIDE_KIND && this.txBody && this.txBody.lstStyle && this.txBody.lstStyle.levels[level])
        {
            slideShapeStyle = new CStyle("slideShapeStyle", null, null, null);
            slideShapeStyle.ParaPr =  clone(this.txBody.lstStyle.levels[level].pPr);
            slideShapeStyle.TextPr =  clone(this.txBody.lstStyle.levels[level].rPr);
            if(slideShapeStyle.TextPr.FontFamily && isThemeFont(slideShapeStyle.TextPr.FontFamily.Name) && theme && theme.themeElements.fontScheme)
            {
                slideShapeStyle.TextPr.FontFamily.Name = getFontInfo(slideShapeStyle.TextPr.FontFamily.Name)(theme.themeElements.fontScheme);
            }
        }

        if(isPlaceholder)
        {
            if(defaultStyle)
            {
                Styles.Style[Styles.Id] = defaultStyle;
                defaultStyle.BasedOn = null;
                ++Styles.Id;
            }

            if(masterStyle)
            {
             Styles.Style[Styles.Id] = masterStyle;
             masterStyle.BasedOn = Styles.Id-1;
             ++Styles.Id;
            }
        }
        else
        {
            if(masterStyle)
            {
                Styles.Style[Styles.Id] = masterStyle;
                masterStyle.BasedOn = null;
                ++Styles.Id;
            }

            if(defaultStyle)
            {
                Styles.Style[Styles.Id] = defaultStyle;
                defaultStyle.BasedOn = Styles.Id-1;
                ++Styles.Id;
            }
        }

        if(masterShapeStyle)
        {
            Styles.Style[Styles.Id] = masterShapeStyle;
            masterShapeStyle.BasedOn = Styles.Id-1;
            ++Styles.Id;
        }

        if(layoutShapeStyle)
        {
            Styles.Style[Styles.Id] = layoutShapeStyle;
            layoutShapeStyle.BasedOn = Styles.Id-1;
            ++Styles.Id;
        }

        if(slideShapeStyle)
        {
            Styles.Style[Styles.Id] = slideShapeStyle;
            slideShapeStyle.BasedOn = Styles.Id-1;
            ++Styles.Id;
        }

        if(this.style && this.style.fontRef)
        {
            var refStyle = new CStyle("refStyle", null, null, null);
            refStyle.ParaPr = {};
            refStyle.TextPr = {};
            switch  (this.style.fontRef.idx)
            {
                case fntStyleInd_major :
                {
                    refStyle.TextPr.FontFamily = {Name : getFontInfo("+mj-lt")(theme.themeElements.fontScheme) };
                    break;
                }
                case fntStyleInd_minor :
                {
                    refStyle.TextPr.FontFamily = {Name : getFontInfo("+mn-lt")(theme.themeElements.fontScheme) };
                    break;
                }
                default :
                {
                    break;
                }
            }

            if(this.style.fontRef.Color != null)
            {
                var unifill = new CUniFill();
                unifill.fill = new CSolidFill();
                unifill.fill.color = this.style.fontRef.Color;
                refStyle.TextPr.unifill = unifill;
            }
            Styles.Style[Styles.Id] = refStyle;
            refStyle.BasedOn = Styles.Id-1;
            ++Styles.Id;
        }
        return Styles;
    },

    Is_Cell: function()
    {
        return true;
    },

    OnContentRecalculate: function(bChange, bForceRecalc )
    {
    },

    Get_Numbering: function(level)
    {
        return new CNumbering();
        return this.parent.presentation.Get_Numbering();
        return this.numbering == undefined ? new CNumbering() : this.numbering;
        if(this.parent == null || this.parent.kind != SLIDE_KIND)
        {
            return new CStyles();
        }

        if(level == undefined)
        {
            level  = 0;
        }
        var Styles = new CStyles();

        var theme = null, layout = null, master = null;
        if(this.parent.Layout != null)
        {
            layout = this.parent.Layout;
            master = this.parent.Layout.Master;
            if(master != null)
            {
                theme = master.Theme;
            }
        }

        var defaultStyle = new CStyle("defaultStyle", null, null, null);
        if(master.presentation.defaultTextStyle.levels[level]!=null)
        {
            defaultStyle.ParaPr =  clone(master.presentation.defaultTextStyle.levels[level].pPr);
            defaultStyle.TextPr =  clone(master.presentation.defaultTextStyle.levels[level].rPr);
            if(defaultStyle.TextPr.FontFamily != undefined && defaultStyle.TextPr.FontFamily.Name!=undefined)
            {
                switch(defaultStyle.TextPr.FontFamily.Name)
                {
                    case "+mj-lt":
                    {
                        defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                        break;
                    }
                    case "+mn-lt":
                    {
                        defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                        break;
                    }
                    case "+mj-ea":
                    {
                        defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                        break;
                    }
                    case "+mn-ea":
                    {
                        defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                        break;
                    }
                    case "+mj-cs":
                    {
                        defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                        break;
                    }
                    case "+mn-cs":
                    {
                        defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                        break;
                    }
                }
            }
            Styles.Style[Styles.Id] = defaultStyle;
            Styles.Id++;
        }
        else
        {
            i = level;
            while(i<10)
            {
                if(master.presentation.defaultTextStyle.levels[i]!=null)
                {
                    defaultStyle.ParaPr =  clone(master.presentation.defaultTextStyle.levels[i].pPr);
                    defaultStyle.TextPr =  clone(master.presentation.defaultTextStyle.levels[i].rPr);
                    if(defaultStyle.TextPr.FontFamily != undefined && defaultStyle.TextPr.FontFamily.Name!=undefined)
                    {
                        switch(defaultStyle.TextPr.FontFamily.Name)
                        {
                            case "+mj-lt":
                            {
                                defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                break;
                            }
                            case "+mn-lt":
                            {
                                defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                break;
                            }
                            case "+mj-ea":
                            {
                                defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                break;
                            }
                            case "+mn-ea":
                            {
                                defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                break;
                            }
                            case "+mj-cs":
                            {
                                defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                break;
                            }
                            case "+mn-cs":
                            {
                                defaultStyle.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                break;
                            }
                        }
                    }
                    Styles.Style[Styles.Id] = defaultStyle;
                    Styles.Id++;
                    break;
                }
                ++i;
            }
        }

        var masterStyles = new CStyle("masterStyle", null, null, null);

        if(this.isPlaceholder())
        {
            switch (this.nvSpPr.nvPr.ph.type)
            {
                case phType_title:
                case phType_ctrTitle:
                {
                    if(master.txStyles.titleStyle.levels[level]!=null)
                    {
                        masterStyles.ParaPr =  clone(master.txStyles.titleStyle.levels[level].pPr);

                        masterStyles.TextPr =  clone(master.txStyles.titleStyle.levels[level].rPr);
                        if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                        {
                            switch(masterStyles.TextPr.FontFamily.Name)
                            {
                                case "+mj-lt":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                    break;
                                }
                                case "+mn-lt":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                    break;
                                }
                                case "+mj-ea":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                    break;
                                }
                                case "+mn-ea":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                    break;
                                }
                                case "+mj-cs":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                    break;
                                }
                                case "+mn-cs":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                    break;
                                }
                            }
                        }

                        masterStyles.BasedOn = Styles.Id-1;
                        Styles.Style[Styles.Id] = masterStyles;
                        Styles.Id++;
                    }
                    else
                    {
                        var i = level;
                        while(i<10)
                        {
                            if(master.txStyles.titleStyle.levels[i]!=null)
                            {
                                masterStyles.ParaPr =  clone(master.txStyles.titleStyle.levels[i].pPr);
                                masterStyles.TextPr =  clone(master.txStyles.titleStyle.levels[i].rPr);
                                if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                                {
                                    switch(masterStyles.TextPr.FontFamily.Name)
                                    {
                                        case "+mj-lt":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                            break;
                                        }
                                        case "+mn-lt":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                            break;
                                        }
                                        case "+mj-ea":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                            break;
                                        }
                                        case "+mn-ea":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                            break;
                                        }
                                        case "+mj-cs":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                            break;
                                        }
                                        case "+mn-cs":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                            break;
                                        }
                                    }
                                }
                                masterStyles.BasedOn = Styles.Id-1;
                                Styles.Style[Styles.Id] = masterStyles;
                                Styles.Id++;
                                break;
                            }
                            ++i;
                        }
                    }
                    break;
                }

                case phType_body:
                {
                    if(master.txStyles.bodyStyle.levels[level]!=null)
                    {
                        masterStyles.ParaPr =  clone(master.txStyles.bodyStyle.levels[level].pPr);
                        masterStyles.TextPr =  clone(master.txStyles.bodyStyle.levels[level].rPr);
                        if(masterStyles.TextPr!=null&&masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                        {
                            switch(masterStyles.TextPr.FontFamily.Name)
                            {
                                case "+mj-lt":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                    break;
                                }
                                case "+mn-lt":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                    break;
                                }
                                case "+mj-ea":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                    break;
                                }
                                case "+mn-ea":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                    break;
                                }
                                case "+mj-cs":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                    break;
                                }
                                case "+mn-cs":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                    break;
                                }
                            }
                        }
                        masterStyles.BasedOn = Styles.Id-1;
                        Styles.Style[Styles.Id] = masterStyles;
                        Styles.Id++;
                    }
                    else
                    {
                        i = level;
                        while(i<10)
                        {
                            if(master.txStyles.bodyStyle.levels[i]!=null)
                            {
                                masterStyles.ParaPr =  clone(master.txStyles.bodyStyle.levels[i].pPr);
                                masterStyles.TextPr =  clone(master.txStyles.bodyStyle.levels[i].rPr);
                                if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                                {
                                    switch(masterStyles.TextPr.FontFamily.Name)
                                    {
                                        case "+mj-lt":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                            break;
                                        }
                                        case "+mn-lt":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                            break;
                                        }
                                        case "+mj-ea":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                            break;
                                        }
                                        case "+mn-ea":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                            break;
                                        }
                                        case "+mj-cs":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                            break;
                                        }
                                        case "+mn-cs":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                            break;
                                        }
                                    }
                                }
                                masterStyles.BasedOn = Styles.Id-1;
                                Styles.Style[Styles.Id] = masterStyles;
                                Styles.Id++;
                                break;
                            }
                            ++i;
                        }
                    }

                    break;
                }

                default:
                {
                    if(master.txStyles.otherStyle.levels[level]!=null)
                    {
                        masterStyles.ParaPr =  clone(master.txStyles.otherStyle.levels[level].pPr);
                        masterStyles.TextPr =  clone(master.txStyles.otherStyle.levels[level].rPr);
                        if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                        {
                            switch(masterStyles.TextPr.FontFamily.Name)
                            {
                                case "+mj-lt":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                    break;
                                }
                                case "+mn-lt":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                    break;
                                }
                                case "+mj-ea":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                    break;
                                }
                                case "+mn-ea":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                    break;
                                }
                                case "+mj-cs":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                    break;
                                }
                                case "+mn-cs":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                    break;
                                }
                            }
                        }
                        masterStyles.BasedOn = Styles.Id-1;
                        Styles.Style[Styles.Id] = masterStyles;
                        Styles.Id++;
                    }
                    else
                    {
                        i = level;
                        while(i<10)
                        {
                            if(master.txStyles.otherStyle.levels[i]!=null)
                            {
                                masterStyles.ParaPr =  clone(master.txStyles.otherStyle.levels[i].pPr);
                                masterStyles.TextPr =  clone(master.txStyles.otherStyle.levels[i].rPr);
                                if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                                {
                                    switch(masterStyles.TextPr.FontFamily.Name)
                                    {
                                        case "+mj-lt":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                            break;
                                        }
                                        case "+mn-lt":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                            break;
                                        }
                                        case "+mj-ea":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                            break;
                                        }
                                        case "+mn-ea":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                            break;
                                        }
                                        case "+mj-cs":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                            break;
                                        }
                                        case "+mn-cs":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                            break;
                                        }
                                    }
                                }
                                masterStyles.BasedOn = Styles.Id-1;
                                Styles.Style[Styles.Id] = masterStyles;
                                Styles.Id++;
                                break;
                            }
                            ++i;
                        }
                    }

                    break;
                }


            }
        }
        else
        {
            if(master.txStyles.otherStyle.levels[level]!=null)
            {
                masterStyles.ParaPr =  clone(master.txStyles.otherStyle.levels[level].pPr);
                masterStyles.TextPr =  clone(master.txStyles.otherStyle.levels[level].rPr);
                if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                {
                    switch(masterStyles.TextPr.FontFamily.Name)
                    {
                        case "+mj-lt":
                        {
                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                            break;
                        }
                        case "+mn-lt":
                        {
                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                            break;
                        }
                        case "+mj-ea":
                        {
                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                            break;
                        }
                        case "+mn-ea":
                        {
                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                            break;
                        }
                        case "+mj-cs":
                        {
                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                            break;
                        }
                        case "+mn-cs":
                        {
                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                            break;
                        }
                    }
                }
                masterStyles.BasedOn = Styles.Id-1;
                Styles.Style[Styles.Id] = masterStyles;
                Styles.Id++;
            }
            else
            {
                i = level;
                while(i<10)
                {
                    if(master.txStyles.otherStyle.levels[i]!=null)
                    {
                        masterStyles.ParaPr =  clone(master.txStyles.otherStyle.levels[i].pPr);
                        masterStyles.TextPr =  clone(master.txStyles.otherStyle.levels[i].rPr);
                        if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                        {
                            switch(masterStyles.TextPr.FontFamily.Name)
                            {
                                case "+mj-lt":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                    break;
                                }
                                case "+mn-lt":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                    break;
                                }
                                case "+mj-ea":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                    break;
                                }
                                case "+mn-ea":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                    break;
                                }
                                case "+mj-cs":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                    break;
                                }
                                case "+mn-cs":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                    break;
                                }
                            }
                        }
                        masterStyles.BasedOn = Styles.Id-1;
                        Styles.Style[Styles.Id] = masterStyles;
                        Styles.Id++;
                        break;
                    }
                    ++i;
                }
            }
        }


        if(!this.isPlaceholder())
        {
            Styles.Style[21] = masterStyles;
            masterStyles.BasedOn = null;
            Styles.Style[22] = defaultStyle;
            defaultStyle.BasedOn = 21;
        }

        if(this.isPlaceholder())
        {
            masterStyles = new CStyle("masterStyle2", null, null, null);
            var masterShape = master.getMatchingShape(this.nvSpPr.nvPr.ph.type, this.nvSpPr.nvPr.ph.idx);
            if(masterShape!=null)
            {
                if(masterShape.txBody!=null)
                {
                    if(masterShape.txBody.lstStyle!=null)
                    {
                        if(masterShape.txBody.lstStyle.levels[level]!=null)
                        {
                            masterStyles.ParaPr =  clone(masterShape.txBody.lstStyle.levels[level].pPr);

                            masterStyles.TextPr =  clone(masterShape.txBody.lstStyle.levels[level].rPr);
                            if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                            {
                                switch(masterStyles.TextPr.FontFamily.Name)
                                {
                                    case "+mj-lt":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                        break;
                                    }
                                    case "+mn-lt":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                        break;
                                    }
                                    case "+mj-ea":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                        break;
                                    }
                                    case "+mn-ea":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                        break;
                                    }
                                    case "+mj-cs":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                        break;
                                    }
                                    case "+mn-cs":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                        break;
                                    }
                                }
                            }
                            masterStyles.BasedOn = Styles.Id-1;
                            Styles.Style[Styles.Id] = masterStyles;
                            Styles.Id++;
                        }
                        else
                        {
                            i = level;
                            while(i<10)
                            {
                                if(masterShape.txBody.lstStyle.levels[i]!=null)
                                {
                                    masterStyles.ParaPr =  clone(masterShape.txBody.lstStyle.levels[i].pPr);
                                    masterStyles.TextPr =  clone(masterShape.txBody.lstStyle.levels[i].rPr);
                                    if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                                    {
                                        switch(masterStyles.TextPr.FontFamily.Name)
                                        {
                                            case "+mj-lt":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                                break;
                                            }
                                            case "+mn-lt":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                                break;
                                            }
                                            case "+mj-ea":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                                break;
                                            }
                                            case "+mn-ea":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                                break;
                                            }
                                            case "+mj-cs":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                                break;
                                            }
                                            case "+mn-cs":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                                break;
                                            }
                                        }
                                    }
                                    masterStyles.BasedOn = Styles.Id-1;
                                    Styles.Style[Styles.Id] = masterStyles;
                                    Styles.Id++;
                                    break;
                                }
                                ++i;
                            }

                        }
                    }
                }
            }

            masterStyles = new CStyle("layoutStyle", null, null, null);
            var layoutShape = layout.getMatchingShape(this.nvSpPr.nvPr.ph.type, this.nvSpPr.nvPr.ph.idx);
            if(layoutShape!=null)
            {
                if(layoutShape.txBody!=null)
                {
                    if(layoutShape.txBody.lstStyle!=null)
                    {
                        if(layoutShape.txBody.lstStyle.levels[level]!=null)
                        {
                            masterStyles.ParaPr =  clone(layoutShape.txBody.lstStyle.levels[level].pPr);

                            masterStyles.TextPr =  clone(layoutShape.txBody.lstStyle.levels[level].rPr);
                            if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                            {
                                switch(masterStyles.TextPr.FontFamily.Name)
                                {
                                    case "+mj-lt":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                        break;
                                    }
                                    case "+mn-lt":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                        break;
                                    }
                                    case "+mj-ea":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                        break;
                                    }
                                    case "+mn-ea":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                        break;
                                    }
                                    case "+mj-cs":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                        break;
                                    }
                                    case "+mn-cs":
                                    {
                                        masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                        break;
                                    }
                                }
                            }
                            masterStyles.BasedOn = Styles.Id-1;
                            Styles.Style[Styles.Id] = masterStyles;
                            Styles.Id++;
                        }
                        else
                        {
                            i = level;
                            while(i<10)
                            {
                                if(layoutShape.txBody.lstStyle.levels[i]!=null)
                                {
                                    masterStyles.ParaPr =  clone(layoutShape.txBody.lstStyle.levels[i].pPr);
                                    masterStyles.TextPr =  clone(layoutShape.txBody.lstStyle.levels[i].rPr);
                                    if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                                    {
                                        switch(masterStyles.TextPr.FontFamily.Name)
                                        {
                                            case "+mj-lt":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                                break;
                                            }
                                            case "+mn-lt":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                                break;
                                            }
                                            case "+mj-ea":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                                break;
                                            }
                                            case "+mn-ea":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                                break;
                                            }
                                            case "+mj-cs":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                                break;
                                            }
                                            case "+mn-cs":
                                            {
                                                masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                                break;
                                            }
                                        }
                                    }
                                    masterStyles.BasedOn = Styles.Id-1;
                                    Styles.Style[Styles.Id] = masterStyles;
                                    Styles.Id++;
                                    break;
                                }
                                ++i;
                            }

                        }

                    }
                }
            }


        }



        masterStyles = new CStyle("shapeStyle", null, null, null);
        masterShape = this;
        if(masterShape!=null)
        {
            if(masterShape.txBody!=null)
            {
                if(masterShape.txBody.lstStyle!=null)
                {
                    if(masterShape.txBody.lstStyle.levels[level]!=null)
                    {
                        masterStyles.ParaPr =  clone(masterShape.txBody.lstStyle.levels[level].pPr);

                        masterStyles.TextPr =  clone(masterShape.txBody.lstStyle.levels[level].rPr);
                        if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                        {
                            switch(masterStyles.TextPr.FontFamily.Name)
                            {
                                case "+mj-lt":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                    break;
                                }
                                case "+mn-lt":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                    break;
                                }
                                case "+mj-ea":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                    break;
                                }
                                case "+mn-ea":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                    break;
                                }
                                case "+mj-cs":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                    break;
                                }
                                case "+mn-cs":
                                {
                                    masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                    break;
                                }
                            }
                        }
                        masterStyles.BasedOn = Styles.Id-1;
                        Styles.Style[Styles.Id] = masterStyles;
                        Styles.Id++;
                    }
                    else
                    {
                        i = level;
                        while(i<10)
                        {
                            if(masterShape.txBody.lstStyle.levels[i]!=null)
                            {
                                masterStyles.ParaPr =  clone(masterShape.txBody.lstStyle.levels[i].pPr);
                                masterStyles.TextPr =  clone(masterShape.txBody.lstStyle.levels[i].rPr);
                                if(masterStyles.TextPr.FontFamily != undefined && masterStyles.TextPr.FontFamily.Name!=undefined)
                                {
                                    switch(masterStyles.TextPr.FontFamily.Name)
                                    {
                                        case "+mj-lt":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.latin;
                                            break;
                                        }
                                        case "+mn-lt":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.latin;
                                            break;
                                        }
                                        case "+mj-ea":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.ea;
                                            break;
                                        }
                                        case "+mn-ea":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.ea;
                                            break;
                                        }
                                        case "+mj-cs":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.majorFont.cs;
                                            break;
                                        }
                                        case "+mn-cs":
                                        {
                                            masterStyles.TextPr.FontFamily.Name = theme.themeElements.fontScheme.minorFont.cs;
                                            break;
                                        }
                                    }
                                }
                                masterStyles.BasedOn = Styles.Id-1;
                                Styles.Style[Styles.Id] = masterStyles;
                                Styles.Id++;
                                break;
                            }
                            ++i;
                        }
                    }

                }
            }
        }


        for(i=21; i < Styles.Style.length; ++i)
        {
            if(Styles.Style[i].TextPr && Styles.Style[i].TextPr.unifill)
            {
                var theme = this.parent.Layout.Master.Theme;
                var brush = null;
                var RGBA = {R:0, G:0, B:0, A:255};
                if (theme && this.style!=null && this.style.fontRef!=null)
                {
                    brush = theme.getFillStyle(this.style.fontRef.idx);
                    this.style.fontRef.Color.Calculate(theme, this.parent, this.parent.Layout, this.parent.Layout.Master);
                    RGBA = this.style.fontRef.Color.RGBA;

                    if (this.style.fontRef.Color.color != null)
                    {
                        if (brush.fill != null && brush.fill.type == FILL_TYPE_SOLID)
                        {
                            brush.fill.color = this.style.fontRef.Color.createDuplicate();
                        }
                    }

                }
                else
                {
                    brush = new CUniFill();
                }

                brush.merge(Styles.Style[i].TextPr.unifill);
                brush.calculate(theme, this.parent, this.parent.Layout, this.parent.Layout.Master, RGBA);
                if(brush.fill && brush.fill.color)
                {
                    Styles.Style[i].TextPr.Color =
                    {
                        r:brush.fill.color.RGBA.R,
                        g:brush.fill.color.RGBA.G,
                        b:brush.fill.color.RGBA.B,
                        A:brush.fill.color.RGBA.A
                    }
                }
            }


        }
        return Styles;



        return Numbering;
       if(this.parent.kind == SLIDE_KIND)
            return this.parent.Layout.Master.presentation.Get_Numbering();
        else if(this.parent.kind == LAYOUT_KIND)
            return this.parent.Master.presentation.Get_Numbering();
        else
            return this.parent.presentation.Get_Numbering();
    },

    Recalculate: function()
    {
        if(this.geometry)
        {
            this.geometry.Recalculate(this.ext.cx, this.ext.cy);
        }
        this.RecalculateContent();
    },

    RecalculateContent: function()
    {
        if(this.txBody)
        {
           this.txBody.recalculate(this);
        }
        this.RecalculateTransformMatrix();
    },

    RecalculateContent2: function()
    {
        if(this.txBody)
        {
            this.txBody.recalculate(this);
        }
    },

    Hit: function(x, y)
    {
        if(this.geometry == null)
        {
            return this.HitInBox(x, y);
        }

        var x_lt, y_lt;
        var hc, vc, sin, cos;

        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        x_lt=-hc*cos+vc*sin+this.pH+this.off.x+hc;
        y_lt=-hc*sin-vc*cos+this.pV+this.off.y+vc;

        var tx=x-x_lt, ty=y-y_lt;

        var vx, vy;

        vx=tx*cos+ty*sin;
        vy=-tx*sin+ty*cos;

        if(this.flipH)
            vx=this.ext.cx-vx;
        if(this.flipV)
            vy=this.ext.cy-vy;



        if(this.brush!=null && this.brush.fill!=null
            && this.brush.fill.type!=FILL_TYPE_NOFILL)
        {
            var context=this.Container.DrawingDocument.CanvasHitContext;
            var pathLst=this.geometry.pathLst, path, cmd;
            for(var i=0; i<pathLst.length; i++)
            {
                path=pathLst[i];
                context.beginPath();
                for(var j=0; j<path.ArrPathCommand.length; j++)
                {
                    cmd=path.ArrPathCommand[j];
                    switch(cmd.id)
                    {
                        case moveTo:
                        {
                            context.moveTo(cmd.X*0.01, cmd.Y*0.01);
                            break;
                        }
                        case lineTo:
                        {
                            context.lineTo(cmd.X*0.01, cmd.Y*0.01);
                            break;
                        }
                        case arcTo:
                        {
                            ArcTo(context, cmd.stX, cmd.stY, cmd.wR, cmd.hR, cmd.stAng, cmd.swAng);
                            break;
                        }
                        case bezier3:
                        {
                            context.quadraticCurveTo(cmd.X0*0.01, cmd.Y0*0.01, cmd.X1*0.01, cmd.Y1*0.01);
                            break;
                        }
                        case bezier4:
                        {
                            context.bezierCurveTo(cmd.X0*0.01, cmd.Y0*0.01, cmd.X1*0.01, cmd.Y1*0.01, cmd.X2*0.01, cmd.Y2*0.01);
                            break;
                        }
                        case close:
                        {
                            context.closePath();
                            if(context.isPointInPath(vx, vy))
                            {
                                context.beginPath();
                                return true;
                            }
                            if(j<path.ArrPathCommand.length-1)
                            {
                                context.beginPath();
                            }
                        }
                    }
                }
            }

        }
        return this.HitInPath(x, y)
    },

    HitInPath: function(x, y)
    {
        if(!this.geometry)
            return false;
        var x_lt, y_lt;
        var hc, vc, sin, cos;

        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        x_lt=-hc*cos+vc*sin+this.pH+this.off.x+hc;
        y_lt=-hc*sin-vc*cos+this.pV+this.off.y+vc;

        var tx=x-x_lt, ty=y-y_lt;

        var vx, vy;

        vx=tx*cos+ty*sin;
        vy=-tx*sin+ty*cos;

        if(this.flipH)
            vx=this.ext.cx-vx;
        if(this.flipV)
            vy=this.ext.cy-vy;

        var context=this.Container.DrawingDocument.CanvasHitContext;
        context.beginPath();

        var pathLst=this.geometry.pathLst, path, cmd;
        var lastX, lastY, beginX, beginY;
        for(var i=0; i<pathLst.length; i++)
        {
            path=pathLst[i];
            context.beginPath();
            for(var j=0; j<path.ArrPathCommand.length; j++)
            {
                cmd=path.ArrPathCommand[j];
                switch(cmd.id)
                {
                    case moveTo:
                    {
                        lastX=cmd.X;
                        lastY=cmd.Y;
                        beginX=cmd.X;
                        beginY=cmd.Y;
                        break;
                    }
                    case lineTo:
                    {
                        if(HitInLine(context, vx, vy, lastX*0.01, lastY*0.01, cmd.X*0.01, cmd.Y*0.01))
                            return true;
                        lastX=cmd.X;
                        lastY=cmd.Y;
                        break;
                    }
                    case arcTo:
                    {
                        if(HitToArc(context, vx, vy,  cmd.stX*0.01, cmd.stY*0.01, cmd.wR*0.01, cmd.hR*0.01, cmd.stAng, cmd.swAng))
                            return true;
                        lastX=(cmd.stX-cmd.wR*Math.cos(cmd.stAng)+cmd.wR*Math.cos(cmd.swAng));
                        lastY=(cmd.stY-cmd.hR*Math.sin(cmd.stAng)+cmd.hR*Math.sin(cmd.swAng));
                        break;
                    }
                    case bezier3:
                    {
                        if(HitInBezier3(context, vx, vy, lastX*0.01, lastY*0.01, cmd.X0*0.01, cmd.Y0*0.01, cmd.X1*0.01, cmd.Y1*0.01))
                            return true;
                        lastX=cmd.X1;
                        lastY=cmd.Y1;
                        break;
                    }
                    case bezier4:
                    {
                        if(HitInBezier4(context, vx, vy, lastX*0.01, lastY*0.01, cmd.X0*0.01, cmd.Y0*0.01, cmd.X1*0.01, cmd.Y1*0.01, cmd.X2*0.01, cmd.Y2*0.01))
                            return true;
                        lastX=cmd.X2;
                        lastY=cmd.Y2;
                        break;
                    }
                    case close:
                    {
                        if(HitInLine(context, vx, vy, lastX*0.01, lastY*0.01, beginX*0.01, beginY*0.01))
                            return true;
                    }
                }
            }
        }

        return false;

    },

    HitInBox: function(x, y)//проверяет поппали ли в границу box'а
    {
        var x_lt, y_lt;
        var hc, vc, sin, cos;

        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        x_lt=-hc*cos+vc*sin+this.pH+this.off.x+hc;
        y_lt=-hc*sin-vc*cos+this.pV+this.off.y+vc;

        var tx=x-x_lt, ty=y-y_lt;

        var vx, vy;

        vx=tx*cos+ty*sin;
        vy=-tx*sin+ty*cos;

        if(this.flipH)
            vx=this.ext.cx-vx;
        if(this.flipV)
            vy=this.ext.cy-vy;

        var context=this.Container.DrawingDocument.CanvasHitContext;
        context.beginPath();
        return (HitInLine(context, vx, vy, 0, 0, this.ext.cx, 0) ||
            HitInLine(context, vx, vy, this.ext.cx, 0, this.ext.cx, this.ext.cy)||
            HitInLine(context, vx, vy, this.ext.cx, this.ext.cy, 0, this.ext.cy)||
            HitInLine(context, vx, vy, 0, this.ext.cy, 0, 0) ||
            HitInLine(context, vx, vy, this.ext.cx*0.5, 0, this.ext.cx*0.5, -this.Container.DrawingDocument.GetMMPerDot(TRACK_DISTANCE_ROTATE))&& !this.isLine);
    },

    InTextRect: function(x, y)
    {

            var x_lt, y_lt;
            var hc, vc, sin, cos;

            hc=this.ext.cx*0.5;
            vc=this.ext.cy*0.5;

            sin=Math.sin(this.rot);
            cos=Math.cos(this.rot);

            x_lt=-hc*cos+vc*sin+this.pH+this.off.x+hc;
            y_lt=-hc*sin-vc*cos+this.pV+this.off.y+vc;

            var tx=x-x_lt, ty=y-y_lt;

            var vx, vy;


            vx=tx*cos+ty*sin;
            vy=-tx*sin+ty*cos;
         if(this.flipH)
            vx=this.ext.cx-vx;
        if(this.flipV)
            vy=this.ext.cy-vy;
        if(this.txBody ) {
            vx -=this.pH;
            vy -= this.pV;
            var content=this.txBody;
            return vx>=content.l && vx<=content.r && vy>=content.t && vy<=content.b;
        }
        else {
            return /*vx>=0 && vx<=this.ext.cx && vy>=0 && vy<=this.ext.cy*/ false;
        }

    },

    GetAngle: function(x, y)
    {
        var x_lt, y_lt;
        var hc, vc, sin, cos;

        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        x_lt=-hc*cos+vc*sin+this.pH+this.off.x+hc;
        y_lt=-hc*sin-vc*cos+this.pV+this.off.y+vc;


        var tx=x-x_lt, ty=y-y_lt;

        var vx, vy;

        vx=tx*cos+ty*sin;
        vy=-tx*sin+ty*cos;

        var ang=Math.PI*0.5+Math.atan2(vy-vc, vx-hc);
        if(!this.flipV)
            return ang;
        else
            return ang+Math.PI;
    },

    Rotate: function(a, ShiftFlag)
    {
        this.rot+=a;
        while(this.rot<0)
        {
            this.rot+=Math.PI*2;
        }
        while(this.rot>=Math.PI*2)
        {
            this.rot-=2*Math.PI;
        }

        if(this.rot<0.07||this.rot>2*Math.PI-0.07)
        {
            this.rot=0;
        }
        if(Math.abs(this.rot-Math.PI*0.5)<0.07)
        {
            this.rot=Math.PI*0.5;
        }

        if(Math.abs(this.rot-Math.PI)<0.07)
        {
            this.rot=Math.PI;
        }

        if(Math.abs(this.rot-1.5*Math.PI)<0.07)
        {
            this.rot=1.5*Math.PI;
        }

        if(ShiftFlag)
        {
            this.rot=(Math.PI/12)*Math.floor(12*this.rot/(Math.PI));
        }
        this.RecalculateTransformMatrix();
    },

    HitHandle: function(x, y)
    {
        var x_lt, y_lt;
        var vx, vy;
        var hc, vc, sin, cos;
        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        x_lt=-hc*cos+vc*sin+this.pH+this.off.x+hc;
        y_lt=-hc*sin-vc*cos+this.pV+this.off.y+vc;

        var r=this.Container.DrawingDocument.GetMMPerDot(TRACK_CIRCLE_RADIUS);

        var tx=x-x_lt, ty=y-y_lt;
        vx=tx*cos+ty*sin;
        vy=-tx*sin+ty*cos;

        var dx, dy;
        if(this.prst!='line')
        {
            if(Math.sqrt(vx*vx+vy*vy)<r)
            {
                return {hit: true, num: this.flipV ?(this.flipH ? 4: 6) : (this.flipH ? 2: 0)};
            }

            dx=vx-this.ext.cx;
            dy=vy-this.ext.cy;
            if(Math.sqrt(dx*dx+dy*dy)<r)
            {
                return {hit:true, num: this.flipV ? (this.flipH ? 0 : 2) : (this.flipH ? 6 : 4)};
            }

            dx=vx;
            dy=vy-this.ext.cy;
            if(Math.sqrt(dx*dx+dy*dy)<r)
            {
                return {hit:true, num: this.flipV ? (this.flipH ? 2 : 0) : (this.flipH ? 4 : 6)};
            }

            dx=vx-this.ext.cx;
            dy=vy;
            if(Math.sqrt(dx*dx+dy*dy)<r)
            {
                return {hit:true, num: this.flipV ? (this.flipH ? 6 : 4) : (this.flipH ? 0 : 2)};
            }

            if(this.ext.cx>min_size)
            {
                dx=vx-hc;
                dy=vy;
                if(Math.sqrt(dx*dx+dy*dy)<r)
                {
                    return {hit:true, num: this.flipV ? 5 : 1};
                }
            }

            if(this.ext.cy>min_size)
            {
                dx=vx-this.ext.cx;
                dy=vy-vc;
                if(Math.sqrt(dx*dx+dy*dy)<r)
                {
                    return {hit:true, num: this.flipH ? 7 : 3};
                }
            }



            if(this.ext.cx>min_size)
            {
                dx=vx-hc;
                dy=vy-this.ext.cy;
                if(Math.sqrt(dx*dx+dy*dy)<r)
                {
                    return {hit:true, num: this.flipV ? 1 : 5};
                }
            }


            if(this.ext.cy>min_size)
            {
                dx=vx;
                dy=vy-vc;
                if(Math.sqrt(dx*dx+dy*dy)<r)
                {
                    return {hit:true, num: this.flipH ? 3 : 7};
                }
            }
            if(!(this.ext.cx<min_size&&this.ext.cy<min_size))
            {
                dx=vx-hc;
                if(!this.flipV)
                {
                    dy=vy+this.Container.DrawingDocument.GetMMPerDot(TRACK_DISTANCE_ROTATE);
                }
                else
                {
                    dy=vy-(this.ext.cy+this.Container.DrawingDocument.GetMMPerDot(TRACK_DISTANCE_ROTATE));
                }

                if(Math.sqrt(dx*dx+dy*dy)<r)
                {
                    return {hit:true, num: 8};
                }
            }
        }
        else
        {
            if(this.flipH) vx=this.ext.cx-vx;
            if(this.flipV) vy=this.ext.cy-vy;

            if(Math.sqrt(vx*vx+vy*vy)<r)
            {
                return {hit: true, num: 0};
            }

            dx=vx-this.ext.cx;
            dy=vy-this.ext.cy;
            if(Math.sqrt(dx*dx+dy*dy)<r)
            {
                return {hit:true, num: 4};
            }

        }

        return {hit:false};
    },

    HitAdj: function(x, y)
    {
        if(this.geometry && this.ext.cx>min_size&&this.ext.cy>min_size)
        {
            var x_lt, y_lt;
            var hc, vc, sin, cos;

            hc=this.ext.cx*0.5;
            vc=this.ext.cy*0.5;

            sin=Math.sin(this.rot);
            cos=Math.cos(this.rot);

            x_lt=-hc*cos+vc*sin+this.pH+this.off.x+hc;
            y_lt=-hc*sin-vc*cos+this.pV+this.off.y+vc;


            var tx=x-x_lt, ty=y-y_lt;

            var vx, vy;

            vx=tx*cos+ty*sin;
            vy=-tx*sin+ty*cos;

            if(this.flipH)
                vx=this.ext.cx-vx;

            if(this.flipV)
                vy=this.ext.cy-vy;

            var dx, dy;

            for(var i=0; i<this.geometry.ahXYLst.length; i++)
            {
                dx=vx-this.geometry.ahXYLst[i].posX;
                dy=vy-this.geometry.ahXYLst[i].posY;

                if(Math.sqrt(dx*dx+dy*dy)<3)
                {
                    return {hit:true, type:xy, num:i};
                }
            }

            for( i=0; i<this.geometry.ahPolarLst.length; i++)
            {
                dx=vx-this.geometry.ahPolarLst[i].posX;
                dy=vy-this.geometry.ahPolarLst[i].posY;

                if(Math.sqrt(dx*dx+dy*dy)<3)
                {
                    return {hit:true, type:polar, num:i};
                }
            }
        }
        return {hit: false};
    },

    GetSizes: function()
    {
        var y1, y3, y5, y7, hc, vc, sin, cos;
        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;
        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);
        y1=-cos*vc;
        y3=sin*hc;
        y5=cos*vc;
        y7=-sin*hc;
        switch(Math.min(y1, y3, y5, y7))
        {
            case y1:
            case y5:
                return {W: this.ext.cx, H: this.ext.cy};
            case y3:
            case y7:
                return {W: this.ext.cy, H: this.ext.cx};
            default:
                return {W: this.ext.cx, H: this.ext.cy};
        }
    },

    CardDirToNum: function(CardDir)
    {
        var y1, y3, y5, y7, hc, vc, sin, cos, numN;

        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        y1=-cos*vc;
        y3=sin*hc;
        y5=cos*vc;
        y7=-sin*hc;

        switch(Math.min(y1, y3, y5, y7))
        {
            case y1:
            {
                if(!this.flipV)
                    numN=1;
                else
                    numN=5;
                break;
            }
            case y3:
            {
                if(!this.flipH)
                    numN=3;
                else
                    numN=7;
                break;
            }
            case y5:
            {
                if(!this.flipV)
                    numN=5;
                else
                    numN=1;
                break;
            }
            case y7:
            {
                if(!this.flipH)
                    numN=7;
                else
                    numN=3;
                break;
            }
            default:
            {
                numN=1;
            }
        }

        if((!(this.flipH||this.flipV))||(this.flipH&&this.flipV))
            return (CardDir+numN)%8;
        else{
            var t=numN-CardDir;
            if(t<0)
                return t+8;
            else
                return t;
        }
    },

    NumToCardDir: function(Num)
    {
        var y1, y3, y5, y7, hc, vc, sin, cos, numN;

        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        y1=-cos*vc;
        y3=sin*hc;
        y5=cos*vc;
        y7=-sin*hc;

        switch(Math.min(y1, y3, y5, y7))
        {
            case y1:
            {
                if(!this.flipV)
                    numN=1;
                else
                    numN=5;
                break;
            }
            case y3:
            {
                if(!this.flipH)
                    numN=3;
                else
                    numN=7;
                break;
            }
            case y5:
            {
                if(!this.flipV)
                    numN=5;
                else
                    numN=1;
                break;
            }
            case y7:
            {
                if(!this.flipH)
                    numN=7;
                else
                    numN=3;
                break;
            }
            default:
            {
                numN=1;
            }
        }

        var tmpArr=[];
        if(!(this.flipH||this.flipV)||this.flipH&&this.flipV){
            tmpArr[numN]=N;
            tmpArr[(numN+1)%8]=NE;
            tmpArr[(numN+2)%8]=E;
            tmpArr[(numN+3)%8]=SE;
            tmpArr[(numN+4)%8]=S;
            tmpArr[(numN+5)%8]=SW;
            tmpArr[(numN+6)%8]=W;
            tmpArr[(numN+7)%8]=NW;
            return tmpArr[Num];
        }
        else{
            var t;
            tmpArr[numN]=N;
            t=numN-1;
            if(t<0) t+=8;
            tmpArr[t]=NE;
            t=numN-2;
            if(t<0) t+=8;
            tmpArr[t]=E;
            t=numN-3;
            if(t<0) t+=8;
            tmpArr[t]=SE;
            t=numN-4;
            if(t<0) t+=8;
            tmpArr[t]=S;
            t=numN-5;
            if(t<0) t+=8;
            tmpArr[t]=SW;
            t=numN-6;
            if(t<0) t+=8;
            tmpArr[t]=W;
            t=numN-7;
            if(t<0) t+=8;
            tmpArr[t]=NW;
            return tmpArr[Num];
        }
    },

    GetCoordPointNum: function(num)
    {
        var hc, vc, sin, cos;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        switch(num)
        {
            case 0:
            {
                return {
                    x:-hc*cos+vc*sin+this.pH+this.off.x+hc,
                    y:-hc*sin-vc*cos+this.pV+this.off.y+vc
                }
            }
            case 1:
            {
                return{
                    x: vc*sin+this.pH+this.off.x+hc,
                    y: -vc*cos+this.pV+this.off.y+vc
                }
            }
            case 2:
            {
                return{
                    x:hc*cos+vc*sin+this.pH+this.off.x+hc,
                    y:hc*sin-vc*cos+this.pV+this.off.y+vc
                }
            }
            case 3:
            {
                return{
                    x:hc*cos+this.pH+this.off.x+hc,
                    y:hc*sin+this.pV+this.off.y+vc
                }
            }
            case 4:
            {
                return{
                    x:hc*cos-vc*sin+this.pH+this.off.x+hc,
                    y:hc*sin+vc*cos+this.pV+this.off.y+vc
                }
            }
            case 5:
            {
                return{
                    x:vc*sin+this.pH+this.off.x+hc,
                    y:-vc*cos+this.pV+this.off.y+vc
                }
            }
            case 6:
            {
                return{
                    x:-hc*cos-vc*sin+this.pH+this.off.x+hc,
                    y:-hc*sin+vc*cos+this.pV+this.off.y+vc
                }
            }
            case 7:
            {
                return{
                    x:-hc*cos+this.pH+this.off.x+hc,
                    y:-hc*sin+this.pV+this.off.y+vc
                }
            }

        }
    },

    GetCoordPointDir: function(dir)
    {
        return this.GetCoordPointNum(this.CardDirToNum(dir));
    },

    ChangeAdjXY: function(num, x, y) {

        var x_lt, y_lt;
        var hc, vc, sin, cos;

        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        x_lt=-hc*cos+vc*sin+this.pH+this.off.x+hc;
        y_lt=-hc*sin-vc*cos+this.pV+this.off.y+vc;

        var tx=x-x_lt, ty=y-y_lt;

        var vx, vy;

        vx=tx*cos+ty*sin;
        vy=-tx*sin+ty*cos;

        if(this.flipH)
            vx=this.ext.cx-vx;

        if(this.flipV)
            vy=this.ext.cy-vy;

        var minX, maxX, minY, maxY, adj=this.geometry.ahXYLst[num];

        minX=adj.minX;
        maxX=adj.maxX;

        minY=adj.minY;
        maxY=adj.maxY;


        if(adj.gdRefX!=undefined)
        {
            if(vx<Math.max(adj.maxXr, adj.minXr) &&
                vx>Math.min(adj.maxXr, adj.minXr))
            {
                var kX=(maxX-minX)/(adj.maxXr-adj.minXr);
                vx=vx-adj.minXr;
                this.geometry.gdLst[adj.gdRefX] = adj.minX+vx*kX;
            }
            else if(vx>=Math.max(adj.maxXr, adj.minXr))
            {

                kX=(maxX-minX)/(adj.maxXr-adj.minXr);
                vx=Math.max(adj.maxXr, adj.minXr)-adj.minXr;
                this.geometry.gdLst[adj.gdRefX] = adj.minX+vx*kX;

            }
            else if(vx<=Math.min(adj.maxXr, adj.minXr))
            {
                kX=(maxX-minX)/(adj.maxXr-adj.minXr);
                vx=Math.min(adj.maxXr, adj.minXr)-adj.minXr;
                this.geometry.gdLst[adj.gdRefX] = adj.minX+vx*kX;
            }
        }

        if(adj.gdRefY!=undefined)
        {
            if(vy<Math.max(adj.maxYr, adj.minYr) &&
                vy>Math.min(adj.maxYr, adj.minYr))
            {
                var kY=(maxY-minY)/(adj.maxYr - adj.minYr);
                vy=vy-adj.minYr;
                this.geometry.gdLst[adj.gdRefY]=
                    adj.minY+vy*kY;
            }
            else if(vy>=Math.max(adj.maxYr, adj.minYr))
            {
                kY=(maxY-minY)/(adj.maxYr - adj.minYr);
                vy=Math.max(adj.maxYr, adj.minYr)-adj.minYr;
                this.geometry.gdLst[adj.gdRefY]=
                    adj.minY+vy*kY;
            }
            else if(vy<=Math.min(adj.maxYr, adj.minYr))
            {
                kY=(maxY-minY)/(adj.maxYr - adj.minYr);
                vy=Math.min(adj.maxYr, adj.minYr)-adj.minYr;
                this.geometry.gdLst[adj.gdRefY]=
                    adj.minY+vy*kY;
            }
        }

        this.Recalculate();
    },

    ChangeAdjPolar: function(num, x, y)
    {
        var x_lt, y_lt;
        var hc, vc, sin, cos;

        hc=this.ext.cx*0.5;
        vc=this.ext.cy*0.5;

        sin=Math.sin(this.rot);
        cos=Math.cos(this.rot);

        x_lt=-hc*cos+vc*sin+this.pH+this.off.x+hc;
        y_lt=-hc*sin-vc*cos+this.pV+this.off.y+vc;


        var tx=x-x_lt, ty=y-y_lt;

        var vx, vy;

        vx=tx*cos+ty*sin;
        vy=-tx*sin+ty*cos;

        if(this.flipH)
            vx=this.ext.cx-vx;

        if(this.flipV)
            vy=this.ext.cy-vy;

        var minAng, maxAng, minR, maxR, adj=this.geometry.ahPolarLst[num];

        minR=adj.minR;
        maxR=adj.maxR;

        tx=vx-this.ext.cx*0.5;
        ty=vy-this.ext.cy*0.5;

        var R=Math.sqrt(tx*tx+ty*ty);

        if(adj.gdRefR!=undefined)
        {
            if(R<Math.max(adj.maxRr, adj.minRr) &&
                R>Math.min(adj.maxRr, adj.minRr))
            {
                R=R-Math.max(adj.maxRr, adj.minRr);
                var kR=(maxR-minR)/(adj.maxRr - adj.minRr);
                this.geometry.gdLst[adj.gdRefR]=R*kR;
            }
            else if(R>=Math.max(adj.maxRr, adj.minRr))
            {
                this.geometry.gdLst[adj.gdRefR]=0;
            }
            else if(R<=Math.min(adj.maxRr, adj.minRr))
            {
                R=Math.min(adj.maxRr, adj.minRr)-Math.max(adj.maxRr, adj.minRr);
                kR=(maxR-minR)/(adj.maxRr - adj.minRr);
                this.geometry.gdLst[adj.gdRefR]=R*kR;
            }
        }

        if(adj.gdRefAng!=undefined)
        {
            var ang=Math.atan2(ty, tx);
            while(ang<0)
                ang+=2*Math.PI;
            ang*=cToDeg;
            if(ang<Math.max(adj.maxAng, adj.minAng) &&
                ang>Math.min(adj.maxAng, adj.minAng))
            {
                this.geometry.gdLst[adj.gdRefAng]=ang;
            }
            else if(ang>=Math.max(adj.maxAng, adj.minAng))
            {
                this.geometry.gdLst[adj.gdRefAng]= Math.max(adj.maxAng, adj.minAng);
            }
            else if(ang<=Math.min(adj.maxAng, adj.minAng))
            {
                this.geometry.gdLst[adj.gdRefAng]= Math.min(adj.maxAng, adj.minAng);
            }
        }
        this.Recalculate();
    },

    CalculateAdjRange: function(num)
    {
        var adj=this.geometry.ahXYLst[num];
        if(adj.gdRefX!=undefined)
        {
            var tmp = this.geometry.gdLst[adj.gdRefX];
            this.geometry.gdLst[adj.gdRefX]=adj.minX;
            this.geometry.Recalculate(this.ext.cx, this.ext.cy);
            var minXr=adj.posX;

            this.geometry.gdLst[adj.gdRefX]=adj.maxX;
            this.geometry.Recalculate(this.ext.cx, this.ext.cy);
            var maxXr=adj.posX;

            this.geometry.gdLst[adj.gdRefX]=tmp;
            this.geometry.Recalculate(this.ext.cx, this.ext.cy);

            adj.minXr=minXr;
            adj.maxXr=maxXr;
        }

        if(adj.gdRefY!=undefined)
        {
            tmp = this.geometry.gdLst[adj.gdRefY];
            this.geometry.gdLst[adj.gdRefY]=adj.minY;
            this.geometry.Recalculate(this.ext.cx, this.ext.cy);
            var minYr=adj.posY;

            this.geometry.gdLst[adj.gdRefY]=adj.maxY;
            this.geometry.Recalculate(this.ext.cx, this.ext.cy);
            var maxYr=adj.posY;

            this.geometry.gdLst[adj.gdRefY]=tmp;
            this.geometry.Recalculate(this.ext.cx, this.ext.cy);

            adj.minYr=minYr;
            adj.maxYr=maxYr;
        }
    },

    CalculateAdjPolarRangeR: function(num)
    {
        var adj=this.geometry.ahPolarLst[num];
        if(adj.gdRefR!=undefined)
        {
            var tmp = this.geometry.gdLst[adj.gdRefR];
            this.geometry.gdLst[adj.gdRefR]=adj.minR;
            this.geometry.Recalculate(this.ext.cx, this.ext.cy);

            var dx, dy, minR, maxR;
            dx=Math.abs(adj.posX-this.ext.cx*0.5);
            dy=Math.abs(adj.posY-this.ext.cy*0.5);

            minR=Math.sqrt(dx*dx+dy*dy);

            this.geometry.gdLst[adj.gdRefR]=adj.maxR;
            this.geometry.Recalculate(this.ext.cx, this.ext.cy);

            dx=Math.abs(adj.posX-this.ext.cx*0.5);
            dy=Math.abs(adj.posY-this.ext.cy*0.5);

            maxR=Math.sqrt(dx*dx+dy*dy);

            adj.minRr=minR;
            adj.maxRr=maxR;

            this.geometry.gdLst[adj.gdRefR]=tmp;
            this.Recalculate();
        }
    },

    Select: function(graphics, zoom)
    {
        if (graphics.m_oContext === undefined)
            return;
        
        if(zoom == undefined)
            zoom = 100;
        var d=10000/zoom;

        graphics.SetIntegerGrid(false);
        graphics.reset();
        graphics.transform3(this.TransformMatrix);
        graphics.m_oContext.fillStyle="rgb(202, 233, 236)";
        graphics.m_oContext.lineWidth=25/zoom;
        graphics.p_color(0,0,0,255);
        if(this.prst!='line')
        {
            graphics.m_oContext.lineWidth=5/zoom;
            graphics._s();
            graphics._m(0, 0);
            graphics._l(this.ext.cx*100, 0);
            graphics._l(this.ext.cx*100, this.ext.cy*100);
            graphics._l(0, this.ext.cy*100);
            graphics._z();
            graphics.ds();

            if(!(this.ext.cx<min_size&&this.ext.cy<min_size))
            {
                graphics._s();
                graphics._m(this.ext.cx*50, 0);
                graphics._l(this.ext.cx*50, -100000/zoom);
                graphics.ds();
            }

            circle(graphics, 0,0, d);
            circle(graphics, this.ext.cx*100,0, d);
            circle(graphics, this.ext.cx*100,this.ext.cy*100, d);
            circle(graphics, 0,this.ext.cy*100, d);



            if(this.ext.cx>min_size)
            {
                square(graphics, this.ext.cx*50,0, d);
                square(graphics, this.ext.cx*50,this.ext.cy*100, d);
            }

            if(this.ext.cy>min_size)
            {
                square(graphics, this.ext.cx*100,this.ext.cy*50, d);
                square(graphics, 0,this.ext.cy*50, d);
            }

            if(!(this.ext.cx<min_size&&this.ext.cy<min_size))
            {
                graphics.m_oContext.fillStyle="rgb(62, 240, 163)";
                circle(graphics, this.ext.cx*50, -100000/zoom, d);
            }
        }
        else
        {
            circle(graphics, 0,0, d);
            circle(graphics, this.ext.cx*100,this.ext.cy*100, d);
        }
        graphics.reset();
    },

    SelectInGroup: function(graphics, transformMatrix, zoom)
    {
        if(zoom == undefined)
            zoom = 100;
        var d=10000/zoom;

        graphics.SetIntegerGrid(false);
        graphics.reset();
        graphics.transform3(transformMatrix);
        graphics.m_oContext.fillStyle="rgb(202, 233, 236)";
        graphics.m_oContext.lineWidth=25/zoom;
        graphics.p_color(0,0,0,255);
        if(this.prst!='line')
        {
            graphics.m_oContext.lineWidth=5/zoom;
            graphics._s();
            graphics._m(0, 0);
            graphics._l(this.ext.cx*100, 0);
            graphics._l(this.ext.cx*100, this.ext.cy*100);
            graphics._l(0, this.ext.cy*100);
            graphics._z();
            graphics.ds();

            if(!(this.ext.cx<min_size&&this.ext.cy<min_size))
            {
                graphics._s();
                graphics._m(this.ext.cx*50, 0);
                graphics._l(this.ext.cx*50, -100000/zoom);
                graphics.ds();
            }

            circle(graphics, 0,0, d);
            circle(graphics, this.ext.cx*100,0, d);
            circle(graphics, this.ext.cx*100,this.ext.cy*100, d);
            circle(graphics, 0,this.ext.cy*100, d);



            if(this.ext.cx>min_size)
            {
                square(graphics, this.ext.cx*50,0, d);
                square(graphics, this.ext.cx*50,this.ext.cy*100, d);
            }

            if(this.ext.cy>min_size)
            {
                square(graphics, this.ext.cx*100,this.ext.cy*50, d);
                square(graphics, 0,this.ext.cy*50, d);
            }

            if(!(this.ext.cx<min_size&&this.ext.cy<min_size))
            {
                graphics.m_oContext.fillStyle="rgb(62, 240, 163)";
                circle(graphics, this.ext.cx*50, -100000/zoom, d);
            }
        }
        else
        {
            circle(graphics, 0,0, d);
            circle(graphics, this.ext.cx*100,this.ext.cy*100, d);
        }
        graphics.reset();
    },



    selectInGroup : function(transformMatrix)
    {},

    GetWH: function()
    {
        var numN=this.CardDirToNum(N);
        if(numN==1||numN==5)
        {
            return { W: this.ext.cx , H: this.ext.cy, ws: 'cx', hs:'cy'};
        }
        else
        {
            return { H: this.ext.cx , W: this.ext.cy, ws: 'cy', hs:'cx'};
        }
    },

    IsGroup: function()
    {
        return false;
    },

    Get_ParentObject_or_DocumentPos : function()
    {
        switch (this.parent.kind)
        {
            case SLIDE_KIND :
            {
                return this.parent.Layout.Master.presentation.Get_ParentObject_or_DocumentPos(0);
            }
            case LAYOUT_KIND :
            {
                return this.parent.Master.presentation.Get_ParentObject_or_DocumentPos(0);
            }
            case MASTER_KIND :
            {
                return this.parent.presentation.Get_ParentObject_or_DocumentPos(0);
            }
        }

    },

    Add_InlineObjectXY: function( DrAdd_InlineObjectXYawing, X, Y, PageNum )
    {
        return this.Parent.Add_InlineObjectXY( DrAdd_InlineObjectXYawing, X, Y, PageNum );
    },

    Undo: function(data)
    {
        data.undo_function.call(this, data)
    },

    Redo: function(data)
    {
        data.redo_function.call(this, data);
    },

    applyProperties : function(element) {

        element.pH = this.pH;
        element.pV = this.pV;

        element.ext = clone(this.ext);
        element.Recalculate();
    } ,

    updateCursorType : function(x, y){

       if(this.selected )
       {
           var hitHandle =  this.HitHandle(x, y);
           if(hitHandle.hit)
           {
                if(hitHandle.num != 8)
                {
                   var direction = this.NumToCardDir(hitHandle.num);
                   switch(direction)
                   {
                       case N:
                       case S:
                       {
                           this.Container.DrawingDocument.SetCursorType("s-resize");
                           break;
                       }

                       case W:
                       case E:
                       {
                           this.Container.DrawingDocument.SetCursorType("w-resize");
                           break;
                       }

                       case SE:
                       case NW: {

                           this.Container.DrawingDocument.SetCursorType("se-resize");
                           break;
                       }
                       case SW:
                       case NE:
                       {
                           this.Container.DrawingDocument.SetCursorType("sw-resize");
                           break;
                       }
                   }
               }
                else
                {
                    this.Container.DrawingDocument.SetCursorType("crosshair");
                }
                return true;
           }

           else
           {
               if(this.HitInBox(x, y)) {

                   this.Container.DrawingDocument.SetCursorType("move");
                   return true;
               }
           }

       }
       else if(this.Hit(x, y))
       {
            this.Container.DrawingDocument.SetCursorType("move");
                   return true;
       }
        return false;
    },

    Document_UpdateSelectionState : function() {

        if(this.txBody )
            var Doc = this.txBody.content;
        else
            return;
        if ( true === Doc.Is_SelectionUse() ) {

            this.Container.DrawingDocument.TargetEnd();
            this.Container.DrawingDocument.SelectEnabled(true);
            this.Container.DrawingDocument.SelectClear();
            Doc.Selection_Draw();
            this.Container.DrawingDocument.SelectShow();
        }
        else if(this.parent.elementsManipulator.Document.CurPos.Type == docpostype_FlowObjects ) {
            this.Container.DrawingDocument.TargetShow();
            this.Container.DrawingDocument.SelectEnabled(false);
        }
    },

    selectionSetStart : function(X,Y, PageIndex, MouseEvent)
    {
        if(this.txBody)
        {
            var tmp =  this.TransformTextMatrix.CreateDublicate();
               var tmp2 = tmp.Invert();
            var Xt = tmp2.TransformPointX(X, Y);
            var Yt = tmp2.TransformPointY(X, Y);
            return  this.txBody.content.Selection_SetStart(Xt,Yt, PageIndex, MouseEvent);
        }
        else
        {
            return false;
        }
    },

    selectionSetEnd : function(X,Y, PageIndex, MouseEvent) {
        if(this.txBody )
            {
                 var tmp =  this.TransformTextMatrix.CreateDublicate();
               var tmp2 = tmp.Invert();
                var Xt = tmp2.TransformPointX(X, Y);
                var Yt = tmp2.TransformPointY(X, Y);
                return  this.txBody.content.Selection_SetEnd(Xt,Yt, PageIndex, MouseEvent);
            }
            else
            {
                return false;
            }
    },

    RecalculateCurPos : function() {
        if(this.txBody )
        {
            if(this.parent.kind == SLIDE_KIND)
            {
                this.Container.DrawingDocument.UpdateTargetTransform(this.TransformTextMatrix);
                this.txBody.recalculateCurPos();
            }
        }
    } ,

    Select_All : function() {
        if(this.txBody && this.txBody.content )
        {
            this.txBody.content.Select_All();
        }
    },

    Remove : function(Count, bOnlyText, bRemoveOnlySelection) {
        if(this.txBody ) {

            this.txBody.content.Remove(Count, bOnlyText, bRemoveOnlySelection)
        }
    },

    Cursor_MoveLeft : function(AddToSelect) {
        if(this.txBody ) {

            this.txBody.content.Cursor_MoveLeft(AddToSelect)
        }
    },

    Cursor_MoveRight : function(AddToSelect) {
        if(this.txBody ) {

            this.txBody.content.Cursor_MoveRight(AddToSelect)
        }
    },

    Cursor_MoveUp : function(AddToSelect) {
        if(this.txBody ) {

            this.txBody.content.Cursor_MoveUp(AddToSelect)
        }
    },

    Cursor_MoveDown : function(AddToSelect) {
        if(this.txBody ) {

            this.txBody.content.Cursor_MoveDown(AddToSelect)
        }
    },

    Add_NewParagraph : function(bRecalculate) {

        if(this.txBody ) {

            this.txBody.content.Add_NewParagraph(bRecalculate);
        }
    },


    setNumbering : function(numberingInfo) {

        if(this.txBody ) {

            this.txBody.content.Set_ParagraphNumbering(numberingInfo);
        }
    },

    Is_HdrFtr : function()
    {
        return false;
    },


    Set_ParagraphShd : function(shd)
    {
        if(this.txBody)
        {
            this.txBody.Set_ParagraphShd(shd);
        }
    },

    OnContentReDraw : function()
    {

    },

    Document_UpdateInterfaceTextState : function()
    {
        if(this.txBody && this.txBody.content)
        {
            this.txBody.content.Document_UpdateInterfaceState();
        }
    },

    Set_ParagraphSpacing : function(sp)
    {
        if(this.txBody)
        {
            if(this.txBody.content)
            {
                this.txBody.content.Set_ParagraphSpacing(sp);
            }
        }
    }
};


function CResizeMeasurer()
{

}